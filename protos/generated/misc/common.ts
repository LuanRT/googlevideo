// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.0
// source: misc/common.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "misc";

export enum AudioQuality {
  AUDIO_QUALITY_UNKNOWN = 0,
  AUDIO_QUALITY_ULTRALOW = 5,
  AUDIO_QUALITY_LOW = 10,
  AUDIO_QUALITY_MEDIUM = 20,
  AUDIO_QUALITY_HIGH = 30,
  UNRECOGNIZED = -1,
}

export function audioQualityFromJSON(object: any): AudioQuality {
  switch (object) {
    case 0:
    case "AUDIO_QUALITY_UNKNOWN":
      return AudioQuality.AUDIO_QUALITY_UNKNOWN;
    case 5:
    case "AUDIO_QUALITY_ULTRALOW":
      return AudioQuality.AUDIO_QUALITY_ULTRALOW;
    case 10:
    case "AUDIO_QUALITY_LOW":
      return AudioQuality.AUDIO_QUALITY_LOW;
    case 20:
    case "AUDIO_QUALITY_MEDIUM":
      return AudioQuality.AUDIO_QUALITY_MEDIUM;
    case 30:
    case "AUDIO_QUALITY_HIGH":
      return AudioQuality.AUDIO_QUALITY_HIGH;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AudioQuality.UNRECOGNIZED;
  }
}

export function audioQualityToJSON(object: AudioQuality): string {
  switch (object) {
    case AudioQuality.AUDIO_QUALITY_UNKNOWN:
      return "AUDIO_QUALITY_UNKNOWN";
    case AudioQuality.AUDIO_QUALITY_ULTRALOW:
      return "AUDIO_QUALITY_ULTRALOW";
    case AudioQuality.AUDIO_QUALITY_LOW:
      return "AUDIO_QUALITY_LOW";
    case AudioQuality.AUDIO_QUALITY_MEDIUM:
      return "AUDIO_QUALITY_MEDIUM";
    case AudioQuality.AUDIO_QUALITY_HIGH:
      return "AUDIO_QUALITY_HIGH";
    case AudioQuality.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum VideoQualitySetting {
  VIDEO_QUALITY_SETTING_UNKNOWN = 0,
  VIDEO_QUALITY_SETTING_HIGHER_QUALITY = 1,
  VIDEO_QUALITY_SETTING_DATA_SAVER = 2,
  VIDEO_QUALITY_SETTING_ADVANCED_MENU = 3,
  UNRECOGNIZED = -1,
}

export function videoQualitySettingFromJSON(object: any): VideoQualitySetting {
  switch (object) {
    case 0:
    case "VIDEO_QUALITY_SETTING_UNKNOWN":
      return VideoQualitySetting.VIDEO_QUALITY_SETTING_UNKNOWN;
    case 1:
    case "VIDEO_QUALITY_SETTING_HIGHER_QUALITY":
      return VideoQualitySetting.VIDEO_QUALITY_SETTING_HIGHER_QUALITY;
    case 2:
    case "VIDEO_QUALITY_SETTING_DATA_SAVER":
      return VideoQualitySetting.VIDEO_QUALITY_SETTING_DATA_SAVER;
    case 3:
    case "VIDEO_QUALITY_SETTING_ADVANCED_MENU":
      return VideoQualitySetting.VIDEO_QUALITY_SETTING_ADVANCED_MENU;
    case -1:
    case "UNRECOGNIZED":
    default:
      return VideoQualitySetting.UNRECOGNIZED;
  }
}

export function videoQualitySettingToJSON(object: VideoQualitySetting): string {
  switch (object) {
    case VideoQualitySetting.VIDEO_QUALITY_SETTING_UNKNOWN:
      return "VIDEO_QUALITY_SETTING_UNKNOWN";
    case VideoQualitySetting.VIDEO_QUALITY_SETTING_HIGHER_QUALITY:
      return "VIDEO_QUALITY_SETTING_HIGHER_QUALITY";
    case VideoQualitySetting.VIDEO_QUALITY_SETTING_DATA_SAVER:
      return "VIDEO_QUALITY_SETTING_DATA_SAVER";
    case VideoQualitySetting.VIDEO_QUALITY_SETTING_ADVANCED_MENU:
      return "VIDEO_QUALITY_SETTING_ADVANCED_MENU";
    case VideoQualitySetting.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum PlaybackAudioRouteOutputType {
  PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_UNKNOWN = 0,
  PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_LINE_OUT = 1,
  PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_HEADPHONES = 2,
  PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_BLUETOOTH_A2DP = 3,
  PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_BUILT_IN_RECEIVER = 4,
  PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_BUILT_IN_SPEAKER = 5,
  PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_HDMI = 6,
  PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_AIR_PLAY = 7,
  PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_BLUETOOTH_LE = 8,
  PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_BLUETOOTH_HFP = 9,
  PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_USB_AUDIO = 10,
  PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_CAR_PLAY = 11,
  PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_ANDROID_AUDIO = 12,
  UNRECOGNIZED = -1,
}

export function playbackAudioRouteOutputTypeFromJSON(object: any): PlaybackAudioRouteOutputType {
  switch (object) {
    case 0:
    case "PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_UNKNOWN":
      return PlaybackAudioRouteOutputType.PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_UNKNOWN;
    case 1:
    case "PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_LINE_OUT":
      return PlaybackAudioRouteOutputType.PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_LINE_OUT;
    case 2:
    case "PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_HEADPHONES":
      return PlaybackAudioRouteOutputType.PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_HEADPHONES;
    case 3:
    case "PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_BLUETOOTH_A2DP":
      return PlaybackAudioRouteOutputType.PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_BLUETOOTH_A2DP;
    case 4:
    case "PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_BUILT_IN_RECEIVER":
      return PlaybackAudioRouteOutputType.PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_BUILT_IN_RECEIVER;
    case 5:
    case "PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_BUILT_IN_SPEAKER":
      return PlaybackAudioRouteOutputType.PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_BUILT_IN_SPEAKER;
    case 6:
    case "PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_HDMI":
      return PlaybackAudioRouteOutputType.PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_HDMI;
    case 7:
    case "PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_AIR_PLAY":
      return PlaybackAudioRouteOutputType.PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_AIR_PLAY;
    case 8:
    case "PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_BLUETOOTH_LE":
      return PlaybackAudioRouteOutputType.PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_BLUETOOTH_LE;
    case 9:
    case "PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_BLUETOOTH_HFP":
      return PlaybackAudioRouteOutputType.PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_BLUETOOTH_HFP;
    case 10:
    case "PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_USB_AUDIO":
      return PlaybackAudioRouteOutputType.PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_USB_AUDIO;
    case 11:
    case "PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_CAR_PLAY":
      return PlaybackAudioRouteOutputType.PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_CAR_PLAY;
    case 12:
    case "PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_ANDROID_AUDIO":
      return PlaybackAudioRouteOutputType.PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_ANDROID_AUDIO;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PlaybackAudioRouteOutputType.UNRECOGNIZED;
  }
}

export function playbackAudioRouteOutputTypeToJSON(object: PlaybackAudioRouteOutputType): string {
  switch (object) {
    case PlaybackAudioRouteOutputType.PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_UNKNOWN:
      return "PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_UNKNOWN";
    case PlaybackAudioRouteOutputType.PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_LINE_OUT:
      return "PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_LINE_OUT";
    case PlaybackAudioRouteOutputType.PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_HEADPHONES:
      return "PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_HEADPHONES";
    case PlaybackAudioRouteOutputType.PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_BLUETOOTH_A2DP:
      return "PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_BLUETOOTH_A2DP";
    case PlaybackAudioRouteOutputType.PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_BUILT_IN_RECEIVER:
      return "PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_BUILT_IN_RECEIVER";
    case PlaybackAudioRouteOutputType.PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_BUILT_IN_SPEAKER:
      return "PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_BUILT_IN_SPEAKER";
    case PlaybackAudioRouteOutputType.PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_HDMI:
      return "PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_HDMI";
    case PlaybackAudioRouteOutputType.PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_AIR_PLAY:
      return "PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_AIR_PLAY";
    case PlaybackAudioRouteOutputType.PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_BLUETOOTH_LE:
      return "PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_BLUETOOTH_LE";
    case PlaybackAudioRouteOutputType.PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_BLUETOOTH_HFP:
      return "PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_BLUETOOTH_HFP";
    case PlaybackAudioRouteOutputType.PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_USB_AUDIO:
      return "PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_USB_AUDIO";
    case PlaybackAudioRouteOutputType.PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_CAR_PLAY:
      return "PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_CAR_PLAY";
    case PlaybackAudioRouteOutputType.PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_ANDROID_AUDIO:
      return "PLAYBACK_AUDIO_ROUTE_OUTPUT_TYPE_ANDROID_AUDIO";
    case PlaybackAudioRouteOutputType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum NetworkMeteredState {
  NETWORK_METERED_STATE_UNKNOWN = 0,
  NETWORK_METERED_STATE_UNMETERED = 1,
  NETWORK_METERED_STATE_METERED = 2,
  UNRECOGNIZED = -1,
}

export function networkMeteredStateFromJSON(object: any): NetworkMeteredState {
  switch (object) {
    case 0:
    case "NETWORK_METERED_STATE_UNKNOWN":
      return NetworkMeteredState.NETWORK_METERED_STATE_UNKNOWN;
    case 1:
    case "NETWORK_METERED_STATE_UNMETERED":
      return NetworkMeteredState.NETWORK_METERED_STATE_UNMETERED;
    case 2:
    case "NETWORK_METERED_STATE_METERED":
      return NetworkMeteredState.NETWORK_METERED_STATE_METERED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NetworkMeteredState.UNRECOGNIZED;
  }
}

export function networkMeteredStateToJSON(object: NetworkMeteredState): string {
  switch (object) {
    case NetworkMeteredState.NETWORK_METERED_STATE_UNKNOWN:
      return "NETWORK_METERED_STATE_UNKNOWN";
    case NetworkMeteredState.NETWORK_METERED_STATE_UNMETERED:
      return "NETWORK_METERED_STATE_UNMETERED";
    case NetworkMeteredState.NETWORK_METERED_STATE_METERED:
      return "NETWORK_METERED_STATE_METERED";
    case NetworkMeteredState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum SeekSource {
  SEEK_SOURCE_UNKNOWN = 0,
  SEEK_SOURCE_TIMESTAMP_IN_COMMENTS = 1,
  SEEK_SOURCE_TIMESTAMP_IN_DESCRIPTION = 2,
  SEEK_SOURCE_MACRO_MARKER_LIST_ITEM = 3,
  SEEK_SOURCE_DOUBLE_TAP_TO_SEEK = 4,
  SEEK_SOURCE_DOUBLE_TAP_TO_SKIP_CHAPTER = 5,
  SEEK_SOURCE_PICK_UP_PLAY_HEAD = 6,
  SEEK_SOURCE_SLIDE_ON_SCRUBBER_BAR = 7,
  SEEK_SOURCE_SLIDE_ON_PLAYER = 8,
  SEEK_SOURCE_SABR_PARTIAL_CHUNK = 9,
  SEEK_SOURCE_SABR_SEEK_TO_HEAD = 10,
  SEEK_SOURCE_SABR_LIVE_DVR_USER_SEEK = 11,
  SEEK_SOURCE_SABR_SEEK_TO_DVR_LOWER_BOUND = 12,
  SEEK_SOURCE_SABR_SEEK_TO_DVR_UPPER_BOUND = 13,
  SEEK_SOURCE_SSDAI_INTERNAL = 14,
  SEEK_SOURCE_START_PLAYBACK = 15,
  SEEK_SOURCE_SABR_ACCURATE_SEEK = 17,
  SEEK_SOURCE_START_PLAYBACK_SEEK_TO_END = 18,
  SEEK_SOURCE_IOS_PLAYER_REMOVED_SEGMENTS = 19,
  SEEK_SOURCE_IOS_PLAYER_SEGMENT_LIST = 20,
  SEEK_SOURCE_IOS_PLAYER_ITEM_SEEK = 21,
  SEEK_SOURCE_IOS_PLAYER_ITEM_SEEK_TO_END = 22,
  SEEK_SOURCE_IOS_PLAYER_SEEK_TO_END_TO_RESYNC = 23,
  SEEK_SOURCE_IOS_SEEK_ACCESSIBILITY_BUTTON = 24,
  SEEK_SOURCE_FINE_SCRUBBER_SLIDE_ON_FILMSTRIP = 25,
  SEEK_SOURCE_FINE_SCRUBBER_TAP_ON_FILMSTRIP = 26,
  SEEK_SOURCE_FINE_SCRUBBER_SLIDE_ON_SCRUBBER_BAR = 27,
  SEEK_SOURCE_SEEK_BUTTON_ON_PLAYER_CONTROL = 28,
  SEEK_SOURCE_SABR_INGESTION_WALL_TIME_SEEK = 29,
  SEEK_SOURCE_PLAYER_VIEW_REPARENT_INTERNAL = 30,
  SEEK_SOURCE_PRESS_REWIND_PLAY_BACK_CONTROL = 31,
  SEEK_SOURCE_PRESS_FAST_FORWARD_PLAY_BACK_CONTROL = 32,
  SEEK_SOURCE_PRESS_LIVE_SYNC_ICON = 33,
  SEEK_SOURCE_PEG_TO_LIVE = 34,
  SEEK_SOURCE_ANDROID_MEDIA_SESSION = 35,
  SEEK_SOURCE_TAP_ON_REPLAY_ACTION = 36,
  SEEK_SOURCE_AUTOMATIC_REPLAY_ACTION = 37,
  SEEK_SOURCE_NON_USER_SEEK_TO_PREVIOUS = 38,
  SEEK_SOURCE_NON_USER_SEEK_TO_NEXT = 39,
  SEEK_SOURCE_HIGHLIGHTS_TAP_PREVIOUS_PLAY = 66,
  SEEK_SOURCE_HIGHLIGHTS_TAP_NEXT_PLAY = 40,
  SEEK_SOURCE_HIGHLIGHTS_TAP_HIDDEN_NEXT_PLAY = 41,
  SEEK_SOURCE_HIGHLIGHTS_TAP_LIST_ITEM = 42,
  SEEK_SOURCE_HIGHLIGHTS_AUTOMATIC_NEXT_PLAY = 43,
  SEEK_SOURCE_HIGHLIGHTS_SEEK_TO_FIRST_PLAY = 44,
  SEEK_SOURCE_HIGHLIGHTS_SEEK_TO_END = 45,
  SEEK_SOURCE_SEGMENTS_TAP_LIST_ITEM = 46,
  SEEK_SOURCE_PIP_FAST_FORWARD_BUTTON = 47,
  SEEK_SOURCE_PIP_REWIND_BUTTON = 48,
  SEEK_SOURCE_PIP_RESUME_ON_HEAD = 49,
  SEEK_SOURCE_MOVING_CLIP_FRAME = 50,
  SEEK_SOURCE_RESUME_CLIP_PREVIOUS_POSITION = 51,
  SEEK_SOURCE_SEEK_TO_NEXT_CHAPTER = 52,
  SEEK_SOURCE_SEEK_TO_PREVIOUS_CHAPTER = 53,
  SEEK_SOURCE_IOS_SHAREPLAY_PAUSE = 54,
  SEEK_SOURCE_IOS_SHAREPLAY_SEEK = 55,
  SEEK_SOURCE_IOS_SHAREPLAY_SYNC_RESPONSE = 56,
  SEEK_SOURCE_SEEK_TO_HEAD_IMMERSIVE_LIVE_VIDEO = 57,
  SEEK_SOURCE_SEEK_TO_START_OF_LOOPING_RANGE_OF_SHORTS = 58,
  SEEK_SOURCE_SABR_SEEK_TO_CLOSEST_KEYFRAME = 59,
  SEEK_SOURCE_SEEK_TO_END_OF_LOOPING_RANGE_OF_SHORTS = 60,
  SEEK_SOURCE_CLIP_SLIDE_ON_FLIMSTRIP = 61,
  SEEK_SOURCE_PICK_UP_CLIP_SLIDER = 62,
  SEEK_SOURCE_FINE_SCRUBBER_CANCELLED = 63,
  SEEK_SOURCE_INLINE_PLAYER_SEEK_CHAPTER = 64,
  SEEK_SOURCE_INLINE_PLAYER_SEEK_SECONDS = 65,
  SEEK_SOURCE_HIGHLIGHTS_PLAYER_EXIT_FULLSCREEN = 67,
  SEEK_SOURCE_LARGE_CONTROLS_FORWARD_BUTTON = 68,
  SEEK_SOURCE_LARGE_CONTROLS_REWIND_BUTTON = 69,
  SEEK_SOURCE_LARGE_CONTROLS_SCRUBBER_BAR = 70,
  SEEK_SOURCE_SEEK_BACKWARD_5S = 71,
  SEEK_SOURCE_SEEK_FORWARD_5S = 72,
  SEEK_SOURCE_SEEK_BACKWARD_10S = 73,
  SEEK_SOURCE_SEEK_FORWARD_10S = 74,
  SEEK_SOURCE_SEEK_FORWARD_60S = 75,
  SEEK_SOURCE_SEEK_BACKWARD_60S = 76,
  SEEK_SOURCE_SEEK_TO_NEXT_FRAME = 77,
  SEEK_SOURCE_SEEK_TO_PREV_FRAME = 78,
  SEEK_SOURCE_KEYBOARD_SEEK_TO_BEGINNING = 79,
  SEEK_SOURCE_KEYBOARD_SEEK_TO_END = 80,
  SEEK_SOURCE_SEEK_PERCENT_OF_VIDEO = 81,
  SEEK_SOURCE_HIDDEN_FAST_FORWARD_BUTTON = 82,
  SEEK_SOURCE_HIDDEN_REWIND_BUTTON = 83,
  SEEK_SOURCE_TIMESTAMP = 84,
  SEEK_SOURCE_LR_MEDIA_SESSION_SEEK = 87,
  SEEK_SOURCE_MIDROLLS_WITH_TIME_RANGE = 88,
  SEEK_SOURCE_SKIP_AD = 89,
  SEEK_SOURCE_SEEK_TO_PREVIOUS = 90,
  SEEK_SOURCE_SEEK_TO_NEXT = 91,
  SEEK_SOURCE_LR_QUICK_SEEK = 92,
  SEEK_SOURCE_ONESIE_LIVE = 93,
  SEEK_SOURCE_LR_PLAYER_CONTROL_ACTION = 94,
  SEEK_SOURCE_UNPLUGGED_LENS_START_CLIP = 95,
  SEEK_SOURCE_LR_KEY_PLAYS = 96,
  SEEK_SOURCE_SSAP_AD_FMT_FATAL = 97,
  SEEK_SOURCE_TVHTML5_INPUT_SOURCE_KEY_EVENT = 98,
  SEEK_SOURCE_TVHTML5_INPUT_SOURCE_CONTROLS = 99,
  SEEK_SOURCE_TVHTML5_INPUT_SOURCE_TOUCH = 100,
  SEEK_SOURCE_TVHTML5_INPUT_SOURCE_TOUCHPAD = 101,
  SEEK_SOURCE_SEEK_TO_HEAD = 102,
  SEEK_SOURCE_AUTOMATIC_PREVIEW_REPLAY_ACTION = 103,
  SEEK_SOURCE_H5_MEDIA_ELEMENT_EVENT = 104,
  SEEK_SOURCE_H5_WORKAROUND_SEEK = 105,
  SEEK_SOURCE_MINIPLAYER_REWIND_BUTTON = 106,
  SEEK_SOURCE_MINIPLAYER_FAST_FORWARD_BUTTON = 107,
  SEEK_SOURCE_SABR_RELOAD_PLAYER_RESPONSE_TOKEN_SEEK = 108,
  SEEK_SOURCE_SLIDE_ON_SCRUBBER_BAR_CHAPTER = 109,
  SEEK_SOURCE_ANDROID_CLEAR_BUFFER = 110,
  UNRECOGNIZED = -1,
}

export function seekSourceFromJSON(object: any): SeekSource {
  switch (object) {
    case 0:
    case "SEEK_SOURCE_UNKNOWN":
      return SeekSource.SEEK_SOURCE_UNKNOWN;
    case 1:
    case "SEEK_SOURCE_TIMESTAMP_IN_COMMENTS":
      return SeekSource.SEEK_SOURCE_TIMESTAMP_IN_COMMENTS;
    case 2:
    case "SEEK_SOURCE_TIMESTAMP_IN_DESCRIPTION":
      return SeekSource.SEEK_SOURCE_TIMESTAMP_IN_DESCRIPTION;
    case 3:
    case "SEEK_SOURCE_MACRO_MARKER_LIST_ITEM":
      return SeekSource.SEEK_SOURCE_MACRO_MARKER_LIST_ITEM;
    case 4:
    case "SEEK_SOURCE_DOUBLE_TAP_TO_SEEK":
      return SeekSource.SEEK_SOURCE_DOUBLE_TAP_TO_SEEK;
    case 5:
    case "SEEK_SOURCE_DOUBLE_TAP_TO_SKIP_CHAPTER":
      return SeekSource.SEEK_SOURCE_DOUBLE_TAP_TO_SKIP_CHAPTER;
    case 6:
    case "SEEK_SOURCE_PICK_UP_PLAY_HEAD":
      return SeekSource.SEEK_SOURCE_PICK_UP_PLAY_HEAD;
    case 7:
    case "SEEK_SOURCE_SLIDE_ON_SCRUBBER_BAR":
      return SeekSource.SEEK_SOURCE_SLIDE_ON_SCRUBBER_BAR;
    case 8:
    case "SEEK_SOURCE_SLIDE_ON_PLAYER":
      return SeekSource.SEEK_SOURCE_SLIDE_ON_PLAYER;
    case 9:
    case "SEEK_SOURCE_SABR_PARTIAL_CHUNK":
      return SeekSource.SEEK_SOURCE_SABR_PARTIAL_CHUNK;
    case 10:
    case "SEEK_SOURCE_SABR_SEEK_TO_HEAD":
      return SeekSource.SEEK_SOURCE_SABR_SEEK_TO_HEAD;
    case 11:
    case "SEEK_SOURCE_SABR_LIVE_DVR_USER_SEEK":
      return SeekSource.SEEK_SOURCE_SABR_LIVE_DVR_USER_SEEK;
    case 12:
    case "SEEK_SOURCE_SABR_SEEK_TO_DVR_LOWER_BOUND":
      return SeekSource.SEEK_SOURCE_SABR_SEEK_TO_DVR_LOWER_BOUND;
    case 13:
    case "SEEK_SOURCE_SABR_SEEK_TO_DVR_UPPER_BOUND":
      return SeekSource.SEEK_SOURCE_SABR_SEEK_TO_DVR_UPPER_BOUND;
    case 14:
    case "SEEK_SOURCE_SSDAI_INTERNAL":
      return SeekSource.SEEK_SOURCE_SSDAI_INTERNAL;
    case 15:
    case "SEEK_SOURCE_START_PLAYBACK":
      return SeekSource.SEEK_SOURCE_START_PLAYBACK;
    case 17:
    case "SEEK_SOURCE_SABR_ACCURATE_SEEK":
      return SeekSource.SEEK_SOURCE_SABR_ACCURATE_SEEK;
    case 18:
    case "SEEK_SOURCE_START_PLAYBACK_SEEK_TO_END":
      return SeekSource.SEEK_SOURCE_START_PLAYBACK_SEEK_TO_END;
    case 19:
    case "SEEK_SOURCE_IOS_PLAYER_REMOVED_SEGMENTS":
      return SeekSource.SEEK_SOURCE_IOS_PLAYER_REMOVED_SEGMENTS;
    case 20:
    case "SEEK_SOURCE_IOS_PLAYER_SEGMENT_LIST":
      return SeekSource.SEEK_SOURCE_IOS_PLAYER_SEGMENT_LIST;
    case 21:
    case "SEEK_SOURCE_IOS_PLAYER_ITEM_SEEK":
      return SeekSource.SEEK_SOURCE_IOS_PLAYER_ITEM_SEEK;
    case 22:
    case "SEEK_SOURCE_IOS_PLAYER_ITEM_SEEK_TO_END":
      return SeekSource.SEEK_SOURCE_IOS_PLAYER_ITEM_SEEK_TO_END;
    case 23:
    case "SEEK_SOURCE_IOS_PLAYER_SEEK_TO_END_TO_RESYNC":
      return SeekSource.SEEK_SOURCE_IOS_PLAYER_SEEK_TO_END_TO_RESYNC;
    case 24:
    case "SEEK_SOURCE_IOS_SEEK_ACCESSIBILITY_BUTTON":
      return SeekSource.SEEK_SOURCE_IOS_SEEK_ACCESSIBILITY_BUTTON;
    case 25:
    case "SEEK_SOURCE_FINE_SCRUBBER_SLIDE_ON_FILMSTRIP":
      return SeekSource.SEEK_SOURCE_FINE_SCRUBBER_SLIDE_ON_FILMSTRIP;
    case 26:
    case "SEEK_SOURCE_FINE_SCRUBBER_TAP_ON_FILMSTRIP":
      return SeekSource.SEEK_SOURCE_FINE_SCRUBBER_TAP_ON_FILMSTRIP;
    case 27:
    case "SEEK_SOURCE_FINE_SCRUBBER_SLIDE_ON_SCRUBBER_BAR":
      return SeekSource.SEEK_SOURCE_FINE_SCRUBBER_SLIDE_ON_SCRUBBER_BAR;
    case 28:
    case "SEEK_SOURCE_SEEK_BUTTON_ON_PLAYER_CONTROL":
      return SeekSource.SEEK_SOURCE_SEEK_BUTTON_ON_PLAYER_CONTROL;
    case 29:
    case "SEEK_SOURCE_SABR_INGESTION_WALL_TIME_SEEK":
      return SeekSource.SEEK_SOURCE_SABR_INGESTION_WALL_TIME_SEEK;
    case 30:
    case "SEEK_SOURCE_PLAYER_VIEW_REPARENT_INTERNAL":
      return SeekSource.SEEK_SOURCE_PLAYER_VIEW_REPARENT_INTERNAL;
    case 31:
    case "SEEK_SOURCE_PRESS_REWIND_PLAY_BACK_CONTROL":
      return SeekSource.SEEK_SOURCE_PRESS_REWIND_PLAY_BACK_CONTROL;
    case 32:
    case "SEEK_SOURCE_PRESS_FAST_FORWARD_PLAY_BACK_CONTROL":
      return SeekSource.SEEK_SOURCE_PRESS_FAST_FORWARD_PLAY_BACK_CONTROL;
    case 33:
    case "SEEK_SOURCE_PRESS_LIVE_SYNC_ICON":
      return SeekSource.SEEK_SOURCE_PRESS_LIVE_SYNC_ICON;
    case 34:
    case "SEEK_SOURCE_PEG_TO_LIVE":
      return SeekSource.SEEK_SOURCE_PEG_TO_LIVE;
    case 35:
    case "SEEK_SOURCE_ANDROID_MEDIA_SESSION":
      return SeekSource.SEEK_SOURCE_ANDROID_MEDIA_SESSION;
    case 36:
    case "SEEK_SOURCE_TAP_ON_REPLAY_ACTION":
      return SeekSource.SEEK_SOURCE_TAP_ON_REPLAY_ACTION;
    case 37:
    case "SEEK_SOURCE_AUTOMATIC_REPLAY_ACTION":
      return SeekSource.SEEK_SOURCE_AUTOMATIC_REPLAY_ACTION;
    case 38:
    case "SEEK_SOURCE_NON_USER_SEEK_TO_PREVIOUS":
      return SeekSource.SEEK_SOURCE_NON_USER_SEEK_TO_PREVIOUS;
    case 39:
    case "SEEK_SOURCE_NON_USER_SEEK_TO_NEXT":
      return SeekSource.SEEK_SOURCE_NON_USER_SEEK_TO_NEXT;
    case 66:
    case "SEEK_SOURCE_HIGHLIGHTS_TAP_PREVIOUS_PLAY":
      return SeekSource.SEEK_SOURCE_HIGHLIGHTS_TAP_PREVIOUS_PLAY;
    case 40:
    case "SEEK_SOURCE_HIGHLIGHTS_TAP_NEXT_PLAY":
      return SeekSource.SEEK_SOURCE_HIGHLIGHTS_TAP_NEXT_PLAY;
    case 41:
    case "SEEK_SOURCE_HIGHLIGHTS_TAP_HIDDEN_NEXT_PLAY":
      return SeekSource.SEEK_SOURCE_HIGHLIGHTS_TAP_HIDDEN_NEXT_PLAY;
    case 42:
    case "SEEK_SOURCE_HIGHLIGHTS_TAP_LIST_ITEM":
      return SeekSource.SEEK_SOURCE_HIGHLIGHTS_TAP_LIST_ITEM;
    case 43:
    case "SEEK_SOURCE_HIGHLIGHTS_AUTOMATIC_NEXT_PLAY":
      return SeekSource.SEEK_SOURCE_HIGHLIGHTS_AUTOMATIC_NEXT_PLAY;
    case 44:
    case "SEEK_SOURCE_HIGHLIGHTS_SEEK_TO_FIRST_PLAY":
      return SeekSource.SEEK_SOURCE_HIGHLIGHTS_SEEK_TO_FIRST_PLAY;
    case 45:
    case "SEEK_SOURCE_HIGHLIGHTS_SEEK_TO_END":
      return SeekSource.SEEK_SOURCE_HIGHLIGHTS_SEEK_TO_END;
    case 46:
    case "SEEK_SOURCE_SEGMENTS_TAP_LIST_ITEM":
      return SeekSource.SEEK_SOURCE_SEGMENTS_TAP_LIST_ITEM;
    case 47:
    case "SEEK_SOURCE_PIP_FAST_FORWARD_BUTTON":
      return SeekSource.SEEK_SOURCE_PIP_FAST_FORWARD_BUTTON;
    case 48:
    case "SEEK_SOURCE_PIP_REWIND_BUTTON":
      return SeekSource.SEEK_SOURCE_PIP_REWIND_BUTTON;
    case 49:
    case "SEEK_SOURCE_PIP_RESUME_ON_HEAD":
      return SeekSource.SEEK_SOURCE_PIP_RESUME_ON_HEAD;
    case 50:
    case "SEEK_SOURCE_MOVING_CLIP_FRAME":
      return SeekSource.SEEK_SOURCE_MOVING_CLIP_FRAME;
    case 51:
    case "SEEK_SOURCE_RESUME_CLIP_PREVIOUS_POSITION":
      return SeekSource.SEEK_SOURCE_RESUME_CLIP_PREVIOUS_POSITION;
    case 52:
    case "SEEK_SOURCE_SEEK_TO_NEXT_CHAPTER":
      return SeekSource.SEEK_SOURCE_SEEK_TO_NEXT_CHAPTER;
    case 53:
    case "SEEK_SOURCE_SEEK_TO_PREVIOUS_CHAPTER":
      return SeekSource.SEEK_SOURCE_SEEK_TO_PREVIOUS_CHAPTER;
    case 54:
    case "SEEK_SOURCE_IOS_SHAREPLAY_PAUSE":
      return SeekSource.SEEK_SOURCE_IOS_SHAREPLAY_PAUSE;
    case 55:
    case "SEEK_SOURCE_IOS_SHAREPLAY_SEEK":
      return SeekSource.SEEK_SOURCE_IOS_SHAREPLAY_SEEK;
    case 56:
    case "SEEK_SOURCE_IOS_SHAREPLAY_SYNC_RESPONSE":
      return SeekSource.SEEK_SOURCE_IOS_SHAREPLAY_SYNC_RESPONSE;
    case 57:
    case "SEEK_SOURCE_SEEK_TO_HEAD_IMMERSIVE_LIVE_VIDEO":
      return SeekSource.SEEK_SOURCE_SEEK_TO_HEAD_IMMERSIVE_LIVE_VIDEO;
    case 58:
    case "SEEK_SOURCE_SEEK_TO_START_OF_LOOPING_RANGE_OF_SHORTS":
      return SeekSource.SEEK_SOURCE_SEEK_TO_START_OF_LOOPING_RANGE_OF_SHORTS;
    case 59:
    case "SEEK_SOURCE_SABR_SEEK_TO_CLOSEST_KEYFRAME":
      return SeekSource.SEEK_SOURCE_SABR_SEEK_TO_CLOSEST_KEYFRAME;
    case 60:
    case "SEEK_SOURCE_SEEK_TO_END_OF_LOOPING_RANGE_OF_SHORTS":
      return SeekSource.SEEK_SOURCE_SEEK_TO_END_OF_LOOPING_RANGE_OF_SHORTS;
    case 61:
    case "SEEK_SOURCE_CLIP_SLIDE_ON_FLIMSTRIP":
      return SeekSource.SEEK_SOURCE_CLIP_SLIDE_ON_FLIMSTRIP;
    case 62:
    case "SEEK_SOURCE_PICK_UP_CLIP_SLIDER":
      return SeekSource.SEEK_SOURCE_PICK_UP_CLIP_SLIDER;
    case 63:
    case "SEEK_SOURCE_FINE_SCRUBBER_CANCELLED":
      return SeekSource.SEEK_SOURCE_FINE_SCRUBBER_CANCELLED;
    case 64:
    case "SEEK_SOURCE_INLINE_PLAYER_SEEK_CHAPTER":
      return SeekSource.SEEK_SOURCE_INLINE_PLAYER_SEEK_CHAPTER;
    case 65:
    case "SEEK_SOURCE_INLINE_PLAYER_SEEK_SECONDS":
      return SeekSource.SEEK_SOURCE_INLINE_PLAYER_SEEK_SECONDS;
    case 67:
    case "SEEK_SOURCE_HIGHLIGHTS_PLAYER_EXIT_FULLSCREEN":
      return SeekSource.SEEK_SOURCE_HIGHLIGHTS_PLAYER_EXIT_FULLSCREEN;
    case 68:
    case "SEEK_SOURCE_LARGE_CONTROLS_FORWARD_BUTTON":
      return SeekSource.SEEK_SOURCE_LARGE_CONTROLS_FORWARD_BUTTON;
    case 69:
    case "SEEK_SOURCE_LARGE_CONTROLS_REWIND_BUTTON":
      return SeekSource.SEEK_SOURCE_LARGE_CONTROLS_REWIND_BUTTON;
    case 70:
    case "SEEK_SOURCE_LARGE_CONTROLS_SCRUBBER_BAR":
      return SeekSource.SEEK_SOURCE_LARGE_CONTROLS_SCRUBBER_BAR;
    case 71:
    case "SEEK_SOURCE_SEEK_BACKWARD_5S":
      return SeekSource.SEEK_SOURCE_SEEK_BACKWARD_5S;
    case 72:
    case "SEEK_SOURCE_SEEK_FORWARD_5S":
      return SeekSource.SEEK_SOURCE_SEEK_FORWARD_5S;
    case 73:
    case "SEEK_SOURCE_SEEK_BACKWARD_10S":
      return SeekSource.SEEK_SOURCE_SEEK_BACKWARD_10S;
    case 74:
    case "SEEK_SOURCE_SEEK_FORWARD_10S":
      return SeekSource.SEEK_SOURCE_SEEK_FORWARD_10S;
    case 75:
    case "SEEK_SOURCE_SEEK_FORWARD_60S":
      return SeekSource.SEEK_SOURCE_SEEK_FORWARD_60S;
    case 76:
    case "SEEK_SOURCE_SEEK_BACKWARD_60S":
      return SeekSource.SEEK_SOURCE_SEEK_BACKWARD_60S;
    case 77:
    case "SEEK_SOURCE_SEEK_TO_NEXT_FRAME":
      return SeekSource.SEEK_SOURCE_SEEK_TO_NEXT_FRAME;
    case 78:
    case "SEEK_SOURCE_SEEK_TO_PREV_FRAME":
      return SeekSource.SEEK_SOURCE_SEEK_TO_PREV_FRAME;
    case 79:
    case "SEEK_SOURCE_KEYBOARD_SEEK_TO_BEGINNING":
      return SeekSource.SEEK_SOURCE_KEYBOARD_SEEK_TO_BEGINNING;
    case 80:
    case "SEEK_SOURCE_KEYBOARD_SEEK_TO_END":
      return SeekSource.SEEK_SOURCE_KEYBOARD_SEEK_TO_END;
    case 81:
    case "SEEK_SOURCE_SEEK_PERCENT_OF_VIDEO":
      return SeekSource.SEEK_SOURCE_SEEK_PERCENT_OF_VIDEO;
    case 82:
    case "SEEK_SOURCE_HIDDEN_FAST_FORWARD_BUTTON":
      return SeekSource.SEEK_SOURCE_HIDDEN_FAST_FORWARD_BUTTON;
    case 83:
    case "SEEK_SOURCE_HIDDEN_REWIND_BUTTON":
      return SeekSource.SEEK_SOURCE_HIDDEN_REWIND_BUTTON;
    case 84:
    case "SEEK_SOURCE_TIMESTAMP":
      return SeekSource.SEEK_SOURCE_TIMESTAMP;
    case 87:
    case "SEEK_SOURCE_LR_MEDIA_SESSION_SEEK":
      return SeekSource.SEEK_SOURCE_LR_MEDIA_SESSION_SEEK;
    case 88:
    case "SEEK_SOURCE_MIDROLLS_WITH_TIME_RANGE":
      return SeekSource.SEEK_SOURCE_MIDROLLS_WITH_TIME_RANGE;
    case 89:
    case "SEEK_SOURCE_SKIP_AD":
      return SeekSource.SEEK_SOURCE_SKIP_AD;
    case 90:
    case "SEEK_SOURCE_SEEK_TO_PREVIOUS":
      return SeekSource.SEEK_SOURCE_SEEK_TO_PREVIOUS;
    case 91:
    case "SEEK_SOURCE_SEEK_TO_NEXT":
      return SeekSource.SEEK_SOURCE_SEEK_TO_NEXT;
    case 92:
    case "SEEK_SOURCE_LR_QUICK_SEEK":
      return SeekSource.SEEK_SOURCE_LR_QUICK_SEEK;
    case 93:
    case "SEEK_SOURCE_ONESIE_LIVE":
      return SeekSource.SEEK_SOURCE_ONESIE_LIVE;
    case 94:
    case "SEEK_SOURCE_LR_PLAYER_CONTROL_ACTION":
      return SeekSource.SEEK_SOURCE_LR_PLAYER_CONTROL_ACTION;
    case 95:
    case "SEEK_SOURCE_UNPLUGGED_LENS_START_CLIP":
      return SeekSource.SEEK_SOURCE_UNPLUGGED_LENS_START_CLIP;
    case 96:
    case "SEEK_SOURCE_LR_KEY_PLAYS":
      return SeekSource.SEEK_SOURCE_LR_KEY_PLAYS;
    case 97:
    case "SEEK_SOURCE_SSAP_AD_FMT_FATAL":
      return SeekSource.SEEK_SOURCE_SSAP_AD_FMT_FATAL;
    case 98:
    case "SEEK_SOURCE_TVHTML5_INPUT_SOURCE_KEY_EVENT":
      return SeekSource.SEEK_SOURCE_TVHTML5_INPUT_SOURCE_KEY_EVENT;
    case 99:
    case "SEEK_SOURCE_TVHTML5_INPUT_SOURCE_CONTROLS":
      return SeekSource.SEEK_SOURCE_TVHTML5_INPUT_SOURCE_CONTROLS;
    case 100:
    case "SEEK_SOURCE_TVHTML5_INPUT_SOURCE_TOUCH":
      return SeekSource.SEEK_SOURCE_TVHTML5_INPUT_SOURCE_TOUCH;
    case 101:
    case "SEEK_SOURCE_TVHTML5_INPUT_SOURCE_TOUCHPAD":
      return SeekSource.SEEK_SOURCE_TVHTML5_INPUT_SOURCE_TOUCHPAD;
    case 102:
    case "SEEK_SOURCE_SEEK_TO_HEAD":
      return SeekSource.SEEK_SOURCE_SEEK_TO_HEAD;
    case 103:
    case "SEEK_SOURCE_AUTOMATIC_PREVIEW_REPLAY_ACTION":
      return SeekSource.SEEK_SOURCE_AUTOMATIC_PREVIEW_REPLAY_ACTION;
    case 104:
    case "SEEK_SOURCE_H5_MEDIA_ELEMENT_EVENT":
      return SeekSource.SEEK_SOURCE_H5_MEDIA_ELEMENT_EVENT;
    case 105:
    case "SEEK_SOURCE_H5_WORKAROUND_SEEK":
      return SeekSource.SEEK_SOURCE_H5_WORKAROUND_SEEK;
    case 106:
    case "SEEK_SOURCE_MINIPLAYER_REWIND_BUTTON":
      return SeekSource.SEEK_SOURCE_MINIPLAYER_REWIND_BUTTON;
    case 107:
    case "SEEK_SOURCE_MINIPLAYER_FAST_FORWARD_BUTTON":
      return SeekSource.SEEK_SOURCE_MINIPLAYER_FAST_FORWARD_BUTTON;
    case 108:
    case "SEEK_SOURCE_SABR_RELOAD_PLAYER_RESPONSE_TOKEN_SEEK":
      return SeekSource.SEEK_SOURCE_SABR_RELOAD_PLAYER_RESPONSE_TOKEN_SEEK;
    case 109:
    case "SEEK_SOURCE_SLIDE_ON_SCRUBBER_BAR_CHAPTER":
      return SeekSource.SEEK_SOURCE_SLIDE_ON_SCRUBBER_BAR_CHAPTER;
    case 110:
    case "SEEK_SOURCE_ANDROID_CLEAR_BUFFER":
      return SeekSource.SEEK_SOURCE_ANDROID_CLEAR_BUFFER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SeekSource.UNRECOGNIZED;
  }
}

export function seekSourceToJSON(object: SeekSource): string {
  switch (object) {
    case SeekSource.SEEK_SOURCE_UNKNOWN:
      return "SEEK_SOURCE_UNKNOWN";
    case SeekSource.SEEK_SOURCE_TIMESTAMP_IN_COMMENTS:
      return "SEEK_SOURCE_TIMESTAMP_IN_COMMENTS";
    case SeekSource.SEEK_SOURCE_TIMESTAMP_IN_DESCRIPTION:
      return "SEEK_SOURCE_TIMESTAMP_IN_DESCRIPTION";
    case SeekSource.SEEK_SOURCE_MACRO_MARKER_LIST_ITEM:
      return "SEEK_SOURCE_MACRO_MARKER_LIST_ITEM";
    case SeekSource.SEEK_SOURCE_DOUBLE_TAP_TO_SEEK:
      return "SEEK_SOURCE_DOUBLE_TAP_TO_SEEK";
    case SeekSource.SEEK_SOURCE_DOUBLE_TAP_TO_SKIP_CHAPTER:
      return "SEEK_SOURCE_DOUBLE_TAP_TO_SKIP_CHAPTER";
    case SeekSource.SEEK_SOURCE_PICK_UP_PLAY_HEAD:
      return "SEEK_SOURCE_PICK_UP_PLAY_HEAD";
    case SeekSource.SEEK_SOURCE_SLIDE_ON_SCRUBBER_BAR:
      return "SEEK_SOURCE_SLIDE_ON_SCRUBBER_BAR";
    case SeekSource.SEEK_SOURCE_SLIDE_ON_PLAYER:
      return "SEEK_SOURCE_SLIDE_ON_PLAYER";
    case SeekSource.SEEK_SOURCE_SABR_PARTIAL_CHUNK:
      return "SEEK_SOURCE_SABR_PARTIAL_CHUNK";
    case SeekSource.SEEK_SOURCE_SABR_SEEK_TO_HEAD:
      return "SEEK_SOURCE_SABR_SEEK_TO_HEAD";
    case SeekSource.SEEK_SOURCE_SABR_LIVE_DVR_USER_SEEK:
      return "SEEK_SOURCE_SABR_LIVE_DVR_USER_SEEK";
    case SeekSource.SEEK_SOURCE_SABR_SEEK_TO_DVR_LOWER_BOUND:
      return "SEEK_SOURCE_SABR_SEEK_TO_DVR_LOWER_BOUND";
    case SeekSource.SEEK_SOURCE_SABR_SEEK_TO_DVR_UPPER_BOUND:
      return "SEEK_SOURCE_SABR_SEEK_TO_DVR_UPPER_BOUND";
    case SeekSource.SEEK_SOURCE_SSDAI_INTERNAL:
      return "SEEK_SOURCE_SSDAI_INTERNAL";
    case SeekSource.SEEK_SOURCE_START_PLAYBACK:
      return "SEEK_SOURCE_START_PLAYBACK";
    case SeekSource.SEEK_SOURCE_SABR_ACCURATE_SEEK:
      return "SEEK_SOURCE_SABR_ACCURATE_SEEK";
    case SeekSource.SEEK_SOURCE_START_PLAYBACK_SEEK_TO_END:
      return "SEEK_SOURCE_START_PLAYBACK_SEEK_TO_END";
    case SeekSource.SEEK_SOURCE_IOS_PLAYER_REMOVED_SEGMENTS:
      return "SEEK_SOURCE_IOS_PLAYER_REMOVED_SEGMENTS";
    case SeekSource.SEEK_SOURCE_IOS_PLAYER_SEGMENT_LIST:
      return "SEEK_SOURCE_IOS_PLAYER_SEGMENT_LIST";
    case SeekSource.SEEK_SOURCE_IOS_PLAYER_ITEM_SEEK:
      return "SEEK_SOURCE_IOS_PLAYER_ITEM_SEEK";
    case SeekSource.SEEK_SOURCE_IOS_PLAYER_ITEM_SEEK_TO_END:
      return "SEEK_SOURCE_IOS_PLAYER_ITEM_SEEK_TO_END";
    case SeekSource.SEEK_SOURCE_IOS_PLAYER_SEEK_TO_END_TO_RESYNC:
      return "SEEK_SOURCE_IOS_PLAYER_SEEK_TO_END_TO_RESYNC";
    case SeekSource.SEEK_SOURCE_IOS_SEEK_ACCESSIBILITY_BUTTON:
      return "SEEK_SOURCE_IOS_SEEK_ACCESSIBILITY_BUTTON";
    case SeekSource.SEEK_SOURCE_FINE_SCRUBBER_SLIDE_ON_FILMSTRIP:
      return "SEEK_SOURCE_FINE_SCRUBBER_SLIDE_ON_FILMSTRIP";
    case SeekSource.SEEK_SOURCE_FINE_SCRUBBER_TAP_ON_FILMSTRIP:
      return "SEEK_SOURCE_FINE_SCRUBBER_TAP_ON_FILMSTRIP";
    case SeekSource.SEEK_SOURCE_FINE_SCRUBBER_SLIDE_ON_SCRUBBER_BAR:
      return "SEEK_SOURCE_FINE_SCRUBBER_SLIDE_ON_SCRUBBER_BAR";
    case SeekSource.SEEK_SOURCE_SEEK_BUTTON_ON_PLAYER_CONTROL:
      return "SEEK_SOURCE_SEEK_BUTTON_ON_PLAYER_CONTROL";
    case SeekSource.SEEK_SOURCE_SABR_INGESTION_WALL_TIME_SEEK:
      return "SEEK_SOURCE_SABR_INGESTION_WALL_TIME_SEEK";
    case SeekSource.SEEK_SOURCE_PLAYER_VIEW_REPARENT_INTERNAL:
      return "SEEK_SOURCE_PLAYER_VIEW_REPARENT_INTERNAL";
    case SeekSource.SEEK_SOURCE_PRESS_REWIND_PLAY_BACK_CONTROL:
      return "SEEK_SOURCE_PRESS_REWIND_PLAY_BACK_CONTROL";
    case SeekSource.SEEK_SOURCE_PRESS_FAST_FORWARD_PLAY_BACK_CONTROL:
      return "SEEK_SOURCE_PRESS_FAST_FORWARD_PLAY_BACK_CONTROL";
    case SeekSource.SEEK_SOURCE_PRESS_LIVE_SYNC_ICON:
      return "SEEK_SOURCE_PRESS_LIVE_SYNC_ICON";
    case SeekSource.SEEK_SOURCE_PEG_TO_LIVE:
      return "SEEK_SOURCE_PEG_TO_LIVE";
    case SeekSource.SEEK_SOURCE_ANDROID_MEDIA_SESSION:
      return "SEEK_SOURCE_ANDROID_MEDIA_SESSION";
    case SeekSource.SEEK_SOURCE_TAP_ON_REPLAY_ACTION:
      return "SEEK_SOURCE_TAP_ON_REPLAY_ACTION";
    case SeekSource.SEEK_SOURCE_AUTOMATIC_REPLAY_ACTION:
      return "SEEK_SOURCE_AUTOMATIC_REPLAY_ACTION";
    case SeekSource.SEEK_SOURCE_NON_USER_SEEK_TO_PREVIOUS:
      return "SEEK_SOURCE_NON_USER_SEEK_TO_PREVIOUS";
    case SeekSource.SEEK_SOURCE_NON_USER_SEEK_TO_NEXT:
      return "SEEK_SOURCE_NON_USER_SEEK_TO_NEXT";
    case SeekSource.SEEK_SOURCE_HIGHLIGHTS_TAP_PREVIOUS_PLAY:
      return "SEEK_SOURCE_HIGHLIGHTS_TAP_PREVIOUS_PLAY";
    case SeekSource.SEEK_SOURCE_HIGHLIGHTS_TAP_NEXT_PLAY:
      return "SEEK_SOURCE_HIGHLIGHTS_TAP_NEXT_PLAY";
    case SeekSource.SEEK_SOURCE_HIGHLIGHTS_TAP_HIDDEN_NEXT_PLAY:
      return "SEEK_SOURCE_HIGHLIGHTS_TAP_HIDDEN_NEXT_PLAY";
    case SeekSource.SEEK_SOURCE_HIGHLIGHTS_TAP_LIST_ITEM:
      return "SEEK_SOURCE_HIGHLIGHTS_TAP_LIST_ITEM";
    case SeekSource.SEEK_SOURCE_HIGHLIGHTS_AUTOMATIC_NEXT_PLAY:
      return "SEEK_SOURCE_HIGHLIGHTS_AUTOMATIC_NEXT_PLAY";
    case SeekSource.SEEK_SOURCE_HIGHLIGHTS_SEEK_TO_FIRST_PLAY:
      return "SEEK_SOURCE_HIGHLIGHTS_SEEK_TO_FIRST_PLAY";
    case SeekSource.SEEK_SOURCE_HIGHLIGHTS_SEEK_TO_END:
      return "SEEK_SOURCE_HIGHLIGHTS_SEEK_TO_END";
    case SeekSource.SEEK_SOURCE_SEGMENTS_TAP_LIST_ITEM:
      return "SEEK_SOURCE_SEGMENTS_TAP_LIST_ITEM";
    case SeekSource.SEEK_SOURCE_PIP_FAST_FORWARD_BUTTON:
      return "SEEK_SOURCE_PIP_FAST_FORWARD_BUTTON";
    case SeekSource.SEEK_SOURCE_PIP_REWIND_BUTTON:
      return "SEEK_SOURCE_PIP_REWIND_BUTTON";
    case SeekSource.SEEK_SOURCE_PIP_RESUME_ON_HEAD:
      return "SEEK_SOURCE_PIP_RESUME_ON_HEAD";
    case SeekSource.SEEK_SOURCE_MOVING_CLIP_FRAME:
      return "SEEK_SOURCE_MOVING_CLIP_FRAME";
    case SeekSource.SEEK_SOURCE_RESUME_CLIP_PREVIOUS_POSITION:
      return "SEEK_SOURCE_RESUME_CLIP_PREVIOUS_POSITION";
    case SeekSource.SEEK_SOURCE_SEEK_TO_NEXT_CHAPTER:
      return "SEEK_SOURCE_SEEK_TO_NEXT_CHAPTER";
    case SeekSource.SEEK_SOURCE_SEEK_TO_PREVIOUS_CHAPTER:
      return "SEEK_SOURCE_SEEK_TO_PREVIOUS_CHAPTER";
    case SeekSource.SEEK_SOURCE_IOS_SHAREPLAY_PAUSE:
      return "SEEK_SOURCE_IOS_SHAREPLAY_PAUSE";
    case SeekSource.SEEK_SOURCE_IOS_SHAREPLAY_SEEK:
      return "SEEK_SOURCE_IOS_SHAREPLAY_SEEK";
    case SeekSource.SEEK_SOURCE_IOS_SHAREPLAY_SYNC_RESPONSE:
      return "SEEK_SOURCE_IOS_SHAREPLAY_SYNC_RESPONSE";
    case SeekSource.SEEK_SOURCE_SEEK_TO_HEAD_IMMERSIVE_LIVE_VIDEO:
      return "SEEK_SOURCE_SEEK_TO_HEAD_IMMERSIVE_LIVE_VIDEO";
    case SeekSource.SEEK_SOURCE_SEEK_TO_START_OF_LOOPING_RANGE_OF_SHORTS:
      return "SEEK_SOURCE_SEEK_TO_START_OF_LOOPING_RANGE_OF_SHORTS";
    case SeekSource.SEEK_SOURCE_SABR_SEEK_TO_CLOSEST_KEYFRAME:
      return "SEEK_SOURCE_SABR_SEEK_TO_CLOSEST_KEYFRAME";
    case SeekSource.SEEK_SOURCE_SEEK_TO_END_OF_LOOPING_RANGE_OF_SHORTS:
      return "SEEK_SOURCE_SEEK_TO_END_OF_LOOPING_RANGE_OF_SHORTS";
    case SeekSource.SEEK_SOURCE_CLIP_SLIDE_ON_FLIMSTRIP:
      return "SEEK_SOURCE_CLIP_SLIDE_ON_FLIMSTRIP";
    case SeekSource.SEEK_SOURCE_PICK_UP_CLIP_SLIDER:
      return "SEEK_SOURCE_PICK_UP_CLIP_SLIDER";
    case SeekSource.SEEK_SOURCE_FINE_SCRUBBER_CANCELLED:
      return "SEEK_SOURCE_FINE_SCRUBBER_CANCELLED";
    case SeekSource.SEEK_SOURCE_INLINE_PLAYER_SEEK_CHAPTER:
      return "SEEK_SOURCE_INLINE_PLAYER_SEEK_CHAPTER";
    case SeekSource.SEEK_SOURCE_INLINE_PLAYER_SEEK_SECONDS:
      return "SEEK_SOURCE_INLINE_PLAYER_SEEK_SECONDS";
    case SeekSource.SEEK_SOURCE_HIGHLIGHTS_PLAYER_EXIT_FULLSCREEN:
      return "SEEK_SOURCE_HIGHLIGHTS_PLAYER_EXIT_FULLSCREEN";
    case SeekSource.SEEK_SOURCE_LARGE_CONTROLS_FORWARD_BUTTON:
      return "SEEK_SOURCE_LARGE_CONTROLS_FORWARD_BUTTON";
    case SeekSource.SEEK_SOURCE_LARGE_CONTROLS_REWIND_BUTTON:
      return "SEEK_SOURCE_LARGE_CONTROLS_REWIND_BUTTON";
    case SeekSource.SEEK_SOURCE_LARGE_CONTROLS_SCRUBBER_BAR:
      return "SEEK_SOURCE_LARGE_CONTROLS_SCRUBBER_BAR";
    case SeekSource.SEEK_SOURCE_SEEK_BACKWARD_5S:
      return "SEEK_SOURCE_SEEK_BACKWARD_5S";
    case SeekSource.SEEK_SOURCE_SEEK_FORWARD_5S:
      return "SEEK_SOURCE_SEEK_FORWARD_5S";
    case SeekSource.SEEK_SOURCE_SEEK_BACKWARD_10S:
      return "SEEK_SOURCE_SEEK_BACKWARD_10S";
    case SeekSource.SEEK_SOURCE_SEEK_FORWARD_10S:
      return "SEEK_SOURCE_SEEK_FORWARD_10S";
    case SeekSource.SEEK_SOURCE_SEEK_FORWARD_60S:
      return "SEEK_SOURCE_SEEK_FORWARD_60S";
    case SeekSource.SEEK_SOURCE_SEEK_BACKWARD_60S:
      return "SEEK_SOURCE_SEEK_BACKWARD_60S";
    case SeekSource.SEEK_SOURCE_SEEK_TO_NEXT_FRAME:
      return "SEEK_SOURCE_SEEK_TO_NEXT_FRAME";
    case SeekSource.SEEK_SOURCE_SEEK_TO_PREV_FRAME:
      return "SEEK_SOURCE_SEEK_TO_PREV_FRAME";
    case SeekSource.SEEK_SOURCE_KEYBOARD_SEEK_TO_BEGINNING:
      return "SEEK_SOURCE_KEYBOARD_SEEK_TO_BEGINNING";
    case SeekSource.SEEK_SOURCE_KEYBOARD_SEEK_TO_END:
      return "SEEK_SOURCE_KEYBOARD_SEEK_TO_END";
    case SeekSource.SEEK_SOURCE_SEEK_PERCENT_OF_VIDEO:
      return "SEEK_SOURCE_SEEK_PERCENT_OF_VIDEO";
    case SeekSource.SEEK_SOURCE_HIDDEN_FAST_FORWARD_BUTTON:
      return "SEEK_SOURCE_HIDDEN_FAST_FORWARD_BUTTON";
    case SeekSource.SEEK_SOURCE_HIDDEN_REWIND_BUTTON:
      return "SEEK_SOURCE_HIDDEN_REWIND_BUTTON";
    case SeekSource.SEEK_SOURCE_TIMESTAMP:
      return "SEEK_SOURCE_TIMESTAMP";
    case SeekSource.SEEK_SOURCE_LR_MEDIA_SESSION_SEEK:
      return "SEEK_SOURCE_LR_MEDIA_SESSION_SEEK";
    case SeekSource.SEEK_SOURCE_MIDROLLS_WITH_TIME_RANGE:
      return "SEEK_SOURCE_MIDROLLS_WITH_TIME_RANGE";
    case SeekSource.SEEK_SOURCE_SKIP_AD:
      return "SEEK_SOURCE_SKIP_AD";
    case SeekSource.SEEK_SOURCE_SEEK_TO_PREVIOUS:
      return "SEEK_SOURCE_SEEK_TO_PREVIOUS";
    case SeekSource.SEEK_SOURCE_SEEK_TO_NEXT:
      return "SEEK_SOURCE_SEEK_TO_NEXT";
    case SeekSource.SEEK_SOURCE_LR_QUICK_SEEK:
      return "SEEK_SOURCE_LR_QUICK_SEEK";
    case SeekSource.SEEK_SOURCE_ONESIE_LIVE:
      return "SEEK_SOURCE_ONESIE_LIVE";
    case SeekSource.SEEK_SOURCE_LR_PLAYER_CONTROL_ACTION:
      return "SEEK_SOURCE_LR_PLAYER_CONTROL_ACTION";
    case SeekSource.SEEK_SOURCE_UNPLUGGED_LENS_START_CLIP:
      return "SEEK_SOURCE_UNPLUGGED_LENS_START_CLIP";
    case SeekSource.SEEK_SOURCE_LR_KEY_PLAYS:
      return "SEEK_SOURCE_LR_KEY_PLAYS";
    case SeekSource.SEEK_SOURCE_SSAP_AD_FMT_FATAL:
      return "SEEK_SOURCE_SSAP_AD_FMT_FATAL";
    case SeekSource.SEEK_SOURCE_TVHTML5_INPUT_SOURCE_KEY_EVENT:
      return "SEEK_SOURCE_TVHTML5_INPUT_SOURCE_KEY_EVENT";
    case SeekSource.SEEK_SOURCE_TVHTML5_INPUT_SOURCE_CONTROLS:
      return "SEEK_SOURCE_TVHTML5_INPUT_SOURCE_CONTROLS";
    case SeekSource.SEEK_SOURCE_TVHTML5_INPUT_SOURCE_TOUCH:
      return "SEEK_SOURCE_TVHTML5_INPUT_SOURCE_TOUCH";
    case SeekSource.SEEK_SOURCE_TVHTML5_INPUT_SOURCE_TOUCHPAD:
      return "SEEK_SOURCE_TVHTML5_INPUT_SOURCE_TOUCHPAD";
    case SeekSource.SEEK_SOURCE_SEEK_TO_HEAD:
      return "SEEK_SOURCE_SEEK_TO_HEAD";
    case SeekSource.SEEK_SOURCE_AUTOMATIC_PREVIEW_REPLAY_ACTION:
      return "SEEK_SOURCE_AUTOMATIC_PREVIEW_REPLAY_ACTION";
    case SeekSource.SEEK_SOURCE_H5_MEDIA_ELEMENT_EVENT:
      return "SEEK_SOURCE_H5_MEDIA_ELEMENT_EVENT";
    case SeekSource.SEEK_SOURCE_H5_WORKAROUND_SEEK:
      return "SEEK_SOURCE_H5_WORKAROUND_SEEK";
    case SeekSource.SEEK_SOURCE_MINIPLAYER_REWIND_BUTTON:
      return "SEEK_SOURCE_MINIPLAYER_REWIND_BUTTON";
    case SeekSource.SEEK_SOURCE_MINIPLAYER_FAST_FORWARD_BUTTON:
      return "SEEK_SOURCE_MINIPLAYER_FAST_FORWARD_BUTTON";
    case SeekSource.SEEK_SOURCE_SABR_RELOAD_PLAYER_RESPONSE_TOKEN_SEEK:
      return "SEEK_SOURCE_SABR_RELOAD_PLAYER_RESPONSE_TOKEN_SEEK";
    case SeekSource.SEEK_SOURCE_SLIDE_ON_SCRUBBER_BAR_CHAPTER:
      return "SEEK_SOURCE_SLIDE_ON_SCRUBBER_BAR_CHAPTER";
    case SeekSource.SEEK_SOURCE_ANDROID_CLEAR_BUFFER:
      return "SEEK_SOURCE_ANDROID_CLEAR_BUFFER";
    case SeekSource.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum OnesieRequestTarget {
  ONESIE_REQUEST_TARGET_UNKNOWN = 0,
  ONESIE_REQUEST_TARGET_ENCRYPTED_PLAYER_SERVICE = 1,
  ONESIE_REQUEST_TARGET_ENCRYPTED_WATCH_SERVICE_DEPRECATED = 2,
  ONESIE_REQUEST_TARGET_ENCRYPTED_WATCH_SERVICE = 3,
  ONESIE_REQUEST_TARGET_INNERTUBE_ENCRYPTED_SERVICE = 4,
  UNRECOGNIZED = -1,
}

export function onesieRequestTargetFromJSON(object: any): OnesieRequestTarget {
  switch (object) {
    case 0:
    case "ONESIE_REQUEST_TARGET_UNKNOWN":
      return OnesieRequestTarget.ONESIE_REQUEST_TARGET_UNKNOWN;
    case 1:
    case "ONESIE_REQUEST_TARGET_ENCRYPTED_PLAYER_SERVICE":
      return OnesieRequestTarget.ONESIE_REQUEST_TARGET_ENCRYPTED_PLAYER_SERVICE;
    case 2:
    case "ONESIE_REQUEST_TARGET_ENCRYPTED_WATCH_SERVICE_DEPRECATED":
      return OnesieRequestTarget.ONESIE_REQUEST_TARGET_ENCRYPTED_WATCH_SERVICE_DEPRECATED;
    case 3:
    case "ONESIE_REQUEST_TARGET_ENCRYPTED_WATCH_SERVICE":
      return OnesieRequestTarget.ONESIE_REQUEST_TARGET_ENCRYPTED_WATCH_SERVICE;
    case 4:
    case "ONESIE_REQUEST_TARGET_INNERTUBE_ENCRYPTED_SERVICE":
      return OnesieRequestTarget.ONESIE_REQUEST_TARGET_INNERTUBE_ENCRYPTED_SERVICE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OnesieRequestTarget.UNRECOGNIZED;
  }
}

export function onesieRequestTargetToJSON(object: OnesieRequestTarget): string {
  switch (object) {
    case OnesieRequestTarget.ONESIE_REQUEST_TARGET_UNKNOWN:
      return "ONESIE_REQUEST_TARGET_UNKNOWN";
    case OnesieRequestTarget.ONESIE_REQUEST_TARGET_ENCRYPTED_PLAYER_SERVICE:
      return "ONESIE_REQUEST_TARGET_ENCRYPTED_PLAYER_SERVICE";
    case OnesieRequestTarget.ONESIE_REQUEST_TARGET_ENCRYPTED_WATCH_SERVICE_DEPRECATED:
      return "ONESIE_REQUEST_TARGET_ENCRYPTED_WATCH_SERVICE_DEPRECATED";
    case OnesieRequestTarget.ONESIE_REQUEST_TARGET_ENCRYPTED_WATCH_SERVICE:
      return "ONESIE_REQUEST_TARGET_ENCRYPTED_WATCH_SERVICE";
    case OnesieRequestTarget.ONESIE_REQUEST_TARGET_INNERTUBE_ENCRYPTED_SERVICE:
      return "ONESIE_REQUEST_TARGET_INNERTUBE_ENCRYPTED_SERVICE";
    case OnesieRequestTarget.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface HttpHeader {
  name?: string | undefined;
  value?: string | undefined;
}

export interface FormatId {
  itag?: number | undefined;
  lastModified?: number | undefined;
  xtags?: string | undefined;
}

export interface InitRange {
  start?: number | undefined;
  end?: number | undefined;
}

export interface IndexRange {
  start?: number | undefined;
  end?: number | undefined;
}

export interface KeyValuePair {
  key?: string | undefined;
  value?: string | undefined;
}

function createBaseHttpHeader(): HttpHeader {
  return { name: "", value: "" };
}

export const HttpHeader: MessageFns<HttpHeader> = {
  encode(message: HttpHeader, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.value !== undefined && message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HttpHeader {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHttpHeader();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HttpHeader {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: HttpHeader): unknown {
    const obj: any = {};
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.value !== undefined && message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HttpHeader>, I>>(base?: I): HttpHeader {
    return HttpHeader.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HttpHeader>, I>>(object: I): HttpHeader {
    const message = createBaseHttpHeader();
    message.name = object.name ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseFormatId(): FormatId {
  return { itag: 0, lastModified: 0, xtags: "" };
}

export const FormatId: MessageFns<FormatId> = {
  encode(message: FormatId, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.itag !== undefined && message.itag !== 0) {
      writer.uint32(8).int32(message.itag);
    }
    if (message.lastModified !== undefined && message.lastModified !== 0) {
      writer.uint32(16).uint64(message.lastModified);
    }
    if (message.xtags !== undefined && message.xtags !== "") {
      writer.uint32(26).string(message.xtags);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FormatId {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFormatId();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.itag = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.lastModified = longToNumber(reader.uint64());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.xtags = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FormatId {
    return {
      itag: isSet(object.itag) ? globalThis.Number(object.itag) : 0,
      lastModified: isSet(object.lastModified) ? globalThis.Number(object.lastModified) : 0,
      xtags: isSet(object.xtags) ? globalThis.String(object.xtags) : "",
    };
  },

  toJSON(message: FormatId): unknown {
    const obj: any = {};
    if (message.itag !== undefined && message.itag !== 0) {
      obj.itag = Math.round(message.itag);
    }
    if (message.lastModified !== undefined && message.lastModified !== 0) {
      obj.lastModified = Math.round(message.lastModified);
    }
    if (message.xtags !== undefined && message.xtags !== "") {
      obj.xtags = message.xtags;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FormatId>, I>>(base?: I): FormatId {
    return FormatId.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FormatId>, I>>(object: I): FormatId {
    const message = createBaseFormatId();
    message.itag = object.itag ?? 0;
    message.lastModified = object.lastModified ?? 0;
    message.xtags = object.xtags ?? "";
    return message;
  },
};

function createBaseInitRange(): InitRange {
  return { start: 0, end: 0 };
}

export const InitRange: MessageFns<InitRange> = {
  encode(message: InitRange, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.start !== undefined && message.start !== 0) {
      writer.uint32(8).int32(message.start);
    }
    if (message.end !== undefined && message.end !== 0) {
      writer.uint32(16).int32(message.end);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InitRange {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInitRange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.start = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.end = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InitRange {
    return {
      start: isSet(object.start) ? globalThis.Number(object.start) : 0,
      end: isSet(object.end) ? globalThis.Number(object.end) : 0,
    };
  },

  toJSON(message: InitRange): unknown {
    const obj: any = {};
    if (message.start !== undefined && message.start !== 0) {
      obj.start = Math.round(message.start);
    }
    if (message.end !== undefined && message.end !== 0) {
      obj.end = Math.round(message.end);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InitRange>, I>>(base?: I): InitRange {
    return InitRange.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InitRange>, I>>(object: I): InitRange {
    const message = createBaseInitRange();
    message.start = object.start ?? 0;
    message.end = object.end ?? 0;
    return message;
  },
};

function createBaseIndexRange(): IndexRange {
  return { start: 0, end: 0 };
}

export const IndexRange: MessageFns<IndexRange> = {
  encode(message: IndexRange, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.start !== undefined && message.start !== 0) {
      writer.uint32(8).int32(message.start);
    }
    if (message.end !== undefined && message.end !== 0) {
      writer.uint32(16).int32(message.end);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IndexRange {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIndexRange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.start = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.end = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IndexRange {
    return {
      start: isSet(object.start) ? globalThis.Number(object.start) : 0,
      end: isSet(object.end) ? globalThis.Number(object.end) : 0,
    };
  },

  toJSON(message: IndexRange): unknown {
    const obj: any = {};
    if (message.start !== undefined && message.start !== 0) {
      obj.start = Math.round(message.start);
    }
    if (message.end !== undefined && message.end !== 0) {
      obj.end = Math.round(message.end);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IndexRange>, I>>(base?: I): IndexRange {
    return IndexRange.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IndexRange>, I>>(object: I): IndexRange {
    const message = createBaseIndexRange();
    message.start = object.start ?? 0;
    message.end = object.end ?? 0;
    return message;
  },
};

function createBaseKeyValuePair(): KeyValuePair {
  return { key: "", value: "" };
}

export const KeyValuePair: MessageFns<KeyValuePair> = {
  encode(message: KeyValuePair, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== undefined && message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined && message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KeyValuePair {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKeyValuePair();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KeyValuePair {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: KeyValuePair): unknown {
    const obj: any = {};
    if (message.key !== undefined && message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined && message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KeyValuePair>, I>>(base?: I): KeyValuePair {
    return KeyValuePair.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KeyValuePair>, I>>(object: I): KeyValuePair {
    const message = createBaseKeyValuePair();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
