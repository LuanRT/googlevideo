// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.28.0
// source: video_streaming/buffered_range.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { FormatId } from "../misc/common.js";
import { TimeRange } from "./time_range.js";

export const protobufPackage = "video_streaming";

export interface BufferedRange {
  formatId: FormatId | undefined;
  startTimeMs: number;
  durationMs: number;
  startSegmentIndex: number;
  endSegmentIndex: number;
  timeRange?: TimeRange | undefined;
  field9?: BufferedRange_UnknownMessage1 | undefined;
  field11?: BufferedRange_UnknownMessage2 | undefined;
  field12?: BufferedRange_UnknownMessage2 | undefined;
}

export interface BufferedRange_UnknownMessage1 {
  field1: BufferedRange_UnknownMessage1_UnknownInnerMessage[];
}

export interface BufferedRange_UnknownMessage1_UnknownInnerMessage {
  videoId?: string | undefined;
  lmt?: number | undefined;
}

export interface BufferedRange_UnknownMessage2 {
  field1?: number | undefined;
  field2?: number | undefined;
  field3?: number | undefined;
}

function createBaseBufferedRange(): BufferedRange {
  return {
    formatId: undefined,
    startTimeMs: 0,
    durationMs: 0,
    startSegmentIndex: 0,
    endSegmentIndex: 0,
    timeRange: undefined,
    field9: undefined,
    field11: undefined,
    field12: undefined,
  };
}

export const BufferedRange: MessageFns<BufferedRange> = {
  encode(message: BufferedRange, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.formatId !== undefined) {
      FormatId.encode(message.formatId, writer.uint32(10).fork()).join();
    }
    if (message.startTimeMs !== 0) {
      writer.uint32(16).int64(message.startTimeMs);
    }
    if (message.durationMs !== 0) {
      writer.uint32(24).int64(message.durationMs);
    }
    if (message.startSegmentIndex !== 0) {
      writer.uint32(32).int32(message.startSegmentIndex);
    }
    if (message.endSegmentIndex !== 0) {
      writer.uint32(40).int32(message.endSegmentIndex);
    }
    if (message.timeRange !== undefined) {
      TimeRange.encode(message.timeRange, writer.uint32(50).fork()).join();
    }
    if (message.field9 !== undefined) {
      BufferedRange_UnknownMessage1.encode(message.field9, writer.uint32(74).fork()).join();
    }
    if (message.field11 !== undefined) {
      BufferedRange_UnknownMessage2.encode(message.field11, writer.uint32(90).fork()).join();
    }
    if (message.field12 !== undefined) {
      BufferedRange_UnknownMessage2.encode(message.field12, writer.uint32(98).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BufferedRange {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBufferedRange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.formatId = FormatId.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.startTimeMs = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.durationMs = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.startSegmentIndex = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.endSegmentIndex = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.timeRange = TimeRange.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.field9 = BufferedRange_UnknownMessage1.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.field11 = BufferedRange_UnknownMessage2.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.field12 = BufferedRange_UnknownMessage2.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseBufferedRange_UnknownMessage1(): BufferedRange_UnknownMessage1 {
  return { field1: [] };
}

export const BufferedRange_UnknownMessage1: MessageFns<BufferedRange_UnknownMessage1> = {
  encode(message: BufferedRange_UnknownMessage1, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.field1) {
      BufferedRange_UnknownMessage1_UnknownInnerMessage.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BufferedRange_UnknownMessage1 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBufferedRange_UnknownMessage1();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.field1.push(BufferedRange_UnknownMessage1_UnknownInnerMessage.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseBufferedRange_UnknownMessage1_UnknownInnerMessage(): BufferedRange_UnknownMessage1_UnknownInnerMessage {
  return { videoId: "", lmt: 0 };
}

export const BufferedRange_UnknownMessage1_UnknownInnerMessage: MessageFns<
  BufferedRange_UnknownMessage1_UnknownInnerMessage
> = {
  encode(
    message: BufferedRange_UnknownMessage1_UnknownInnerMessage,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.videoId !== undefined && message.videoId !== "") {
      writer.uint32(10).string(message.videoId);
    }
    if (message.lmt !== undefined && message.lmt !== 0) {
      writer.uint32(16).uint64(message.lmt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BufferedRange_UnknownMessage1_UnknownInnerMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBufferedRange_UnknownMessage1_UnknownInnerMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.videoId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.lmt = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseBufferedRange_UnknownMessage2(): BufferedRange_UnknownMessage2 {
  return { field1: 0, field2: 0, field3: 0 };
}

export const BufferedRange_UnknownMessage2: MessageFns<BufferedRange_UnknownMessage2> = {
  encode(message: BufferedRange_UnknownMessage2, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.field1 !== undefined && message.field1 !== 0) {
      writer.uint32(8).int32(message.field1);
    }
    if (message.field2 !== undefined && message.field2 !== 0) {
      writer.uint32(16).int32(message.field2);
    }
    if (message.field3 !== undefined && message.field3 !== 0) {
      writer.uint32(24).int32(message.field3);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BufferedRange_UnknownMessage2 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBufferedRange_UnknownMessage2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.field1 = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.field2 = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.field3 = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
