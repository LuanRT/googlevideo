// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.0
// source: video_streaming/encrypted_player_request.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "video_streaming";

export interface EncryptedPlayerRequest {
  context?: Uint8Array | undefined;
  encryptedOnesiePlayerRequest?: Uint8Array | undefined;
  encryptedClientKey?: Uint8Array | undefined;
  iv?: Uint8Array | undefined;
  hmac?: Uint8Array | undefined;
  reverseProxyConfig?: string | undefined;
  serializeResponseAsJson?: boolean | undefined;
  enableAdPlacementsPreroll?: boolean | undefined;
  enableCompression?: boolean | undefined;
  ustreamerFlags?: EncryptedPlayerRequest_UstreamerFlags | undefined;
  unencryptedOnesiePlayerRequest?: Uint8Array | undefined;
  useJsonformatterToParsePlayerResponse?: boolean | undefined;
}

export interface EncryptedPlayerRequest_UstreamerFlags {
  sendVideoPlaybackConfig?: boolean | undefined;
}

function createBaseEncryptedPlayerRequest(): EncryptedPlayerRequest {
  return {
    context: new Uint8Array(0),
    encryptedOnesiePlayerRequest: new Uint8Array(0),
    encryptedClientKey: new Uint8Array(0),
    iv: new Uint8Array(0),
    hmac: new Uint8Array(0),
    reverseProxyConfig: "",
    serializeResponseAsJson: false,
    enableAdPlacementsPreroll: false,
    enableCompression: false,
    ustreamerFlags: undefined,
    unencryptedOnesiePlayerRequest: new Uint8Array(0),
    useJsonformatterToParsePlayerResponse: false,
  };
}

export const EncryptedPlayerRequest: MessageFns<EncryptedPlayerRequest> = {
  encode(message: EncryptedPlayerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined && message.context.length !== 0) {
      writer.uint32(10).bytes(message.context);
    }
    if (message.encryptedOnesiePlayerRequest !== undefined && message.encryptedOnesiePlayerRequest.length !== 0) {
      writer.uint32(18).bytes(message.encryptedOnesiePlayerRequest);
    }
    if (message.encryptedClientKey !== undefined && message.encryptedClientKey.length !== 0) {
      writer.uint32(42).bytes(message.encryptedClientKey);
    }
    if (message.iv !== undefined && message.iv.length !== 0) {
      writer.uint32(50).bytes(message.iv);
    }
    if (message.hmac !== undefined && message.hmac.length !== 0) {
      writer.uint32(58).bytes(message.hmac);
    }
    if (message.reverseProxyConfig !== undefined && message.reverseProxyConfig !== "") {
      writer.uint32(74).string(message.reverseProxyConfig);
    }
    if (message.serializeResponseAsJson !== undefined && message.serializeResponseAsJson !== false) {
      writer.uint32(80).bool(message.serializeResponseAsJson);
    }
    if (message.enableAdPlacementsPreroll !== undefined && message.enableAdPlacementsPreroll !== false) {
      writer.uint32(104).bool(message.enableAdPlacementsPreroll);
    }
    if (message.enableCompression !== undefined && message.enableCompression !== false) {
      writer.uint32(112).bool(message.enableCompression);
    }
    if (message.ustreamerFlags !== undefined) {
      EncryptedPlayerRequest_UstreamerFlags.encode(message.ustreamerFlags, writer.uint32(122).fork()).join();
    }
    if (message.unencryptedOnesiePlayerRequest !== undefined && message.unencryptedOnesiePlayerRequest.length !== 0) {
      writer.uint32(130).bytes(message.unencryptedOnesiePlayerRequest);
    }
    if (
      message.useJsonformatterToParsePlayerResponse !== undefined &&
      message.useJsonformatterToParsePlayerResponse !== false
    ) {
      writer.uint32(136).bool(message.useJsonformatterToParsePlayerResponse);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EncryptedPlayerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEncryptedPlayerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.encryptedOnesiePlayerRequest = reader.bytes();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.encryptedClientKey = reader.bytes();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.iv = reader.bytes();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.hmac = reader.bytes();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.reverseProxyConfig = reader.string();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.serializeResponseAsJson = reader.bool();
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.enableAdPlacementsPreroll = reader.bool();
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.enableCompression = reader.bool();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.ustreamerFlags = EncryptedPlayerRequest_UstreamerFlags.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.unencryptedOnesiePlayerRequest = reader.bytes();
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }

          message.useJsonformatterToParsePlayerResponse = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseEncryptedPlayerRequest_UstreamerFlags(): EncryptedPlayerRequest_UstreamerFlags {
  return { sendVideoPlaybackConfig: false };
}

export const EncryptedPlayerRequest_UstreamerFlags: MessageFns<EncryptedPlayerRequest_UstreamerFlags> = {
  encode(message: EncryptedPlayerRequest_UstreamerFlags, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sendVideoPlaybackConfig !== undefined && message.sendVideoPlaybackConfig !== false) {
      writer.uint32(16).bool(message.sendVideoPlaybackConfig);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EncryptedPlayerRequest_UstreamerFlags {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEncryptedPlayerRequest_UstreamerFlags();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sendVideoPlaybackConfig = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
