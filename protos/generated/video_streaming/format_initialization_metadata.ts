// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.0
// source: video_streaming/format_initialization_metadata.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { FormatId, IndexRange, InitRange } from "../misc/common.js";

export const protobufPackage = "video_streaming";

export interface FormatInitializationMetadata {
  videoId?: string | undefined;
  formatId?: FormatId | undefined;
  endTimeMs?: number | undefined;
  endSegmentNumber?: number | undefined;
  mimeType?: string | undefined;
  initRange?: InitRange | undefined;
  indexRange?: IndexRange | undefined;
  field8?: number | undefined;
  durationMs?: number | undefined;
  field10?: number | undefined;
}

function createBaseFormatInitializationMetadata(): FormatInitializationMetadata {
  return {
    videoId: "",
    formatId: undefined,
    endTimeMs: 0,
    endSegmentNumber: 0,
    mimeType: "",
    initRange: undefined,
    indexRange: undefined,
    field8: 0,
    durationMs: 0,
    field10: 0,
  };
}

export const FormatInitializationMetadata: MessageFns<FormatInitializationMetadata> = {
  encode(message: FormatInitializationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.videoId !== undefined && message.videoId !== "") {
      writer.uint32(10).string(message.videoId);
    }
    if (message.formatId !== undefined) {
      FormatId.encode(message.formatId, writer.uint32(18).fork()).join();
    }
    if (message.endTimeMs !== undefined && message.endTimeMs !== 0) {
      writer.uint32(24).int32(message.endTimeMs);
    }
    if (message.endSegmentNumber !== undefined && message.endSegmentNumber !== 0) {
      writer.uint32(32).int64(message.endSegmentNumber);
    }
    if (message.mimeType !== undefined && message.mimeType !== "") {
      writer.uint32(42).string(message.mimeType);
    }
    if (message.initRange !== undefined) {
      InitRange.encode(message.initRange, writer.uint32(50).fork()).join();
    }
    if (message.indexRange !== undefined) {
      IndexRange.encode(message.indexRange, writer.uint32(58).fork()).join();
    }
    if (message.field8 !== undefined && message.field8 !== 0) {
      writer.uint32(64).int32(message.field8);
    }
    if (message.durationMs !== undefined && message.durationMs !== 0) {
      writer.uint32(72).int32(message.durationMs);
    }
    if (message.field10 !== undefined && message.field10 !== 0) {
      writer.uint32(80).int32(message.field10);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FormatInitializationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFormatInitializationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.videoId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.formatId = FormatId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.endTimeMs = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.endSegmentNumber = longToNumber(reader.int64());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.mimeType = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.initRange = InitRange.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.indexRange = IndexRange.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.field8 = reader.int32();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.durationMs = reader.int32();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.field10 = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FormatInitializationMetadata {
    return {
      videoId: isSet(object.videoId) ? globalThis.String(object.videoId) : "",
      formatId: isSet(object.formatId) ? FormatId.fromJSON(object.formatId) : undefined,
      endTimeMs: isSet(object.endTimeMs) ? globalThis.Number(object.endTimeMs) : 0,
      endSegmentNumber: isSet(object.endSegmentNumber) ? globalThis.Number(object.endSegmentNumber) : 0,
      mimeType: isSet(object.mimeType) ? globalThis.String(object.mimeType) : "",
      initRange: isSet(object.initRange) ? InitRange.fromJSON(object.initRange) : undefined,
      indexRange: isSet(object.indexRange) ? IndexRange.fromJSON(object.indexRange) : undefined,
      field8: isSet(object.field8) ? globalThis.Number(object.field8) : 0,
      durationMs: isSet(object.durationMs) ? globalThis.Number(object.durationMs) : 0,
      field10: isSet(object.field10) ? globalThis.Number(object.field10) : 0,
    };
  },

  toJSON(message: FormatInitializationMetadata): unknown {
    const obj: any = {};
    if (message.videoId !== undefined && message.videoId !== "") {
      obj.videoId = message.videoId;
    }
    if (message.formatId !== undefined) {
      obj.formatId = FormatId.toJSON(message.formatId);
    }
    if (message.endTimeMs !== undefined && message.endTimeMs !== 0) {
      obj.endTimeMs = Math.round(message.endTimeMs);
    }
    if (message.endSegmentNumber !== undefined && message.endSegmentNumber !== 0) {
      obj.endSegmentNumber = Math.round(message.endSegmentNumber);
    }
    if (message.mimeType !== undefined && message.mimeType !== "") {
      obj.mimeType = message.mimeType;
    }
    if (message.initRange !== undefined) {
      obj.initRange = InitRange.toJSON(message.initRange);
    }
    if (message.indexRange !== undefined) {
      obj.indexRange = IndexRange.toJSON(message.indexRange);
    }
    if (message.field8 !== undefined && message.field8 !== 0) {
      obj.field8 = Math.round(message.field8);
    }
    if (message.durationMs !== undefined && message.durationMs !== 0) {
      obj.durationMs = Math.round(message.durationMs);
    }
    if (message.field10 !== undefined && message.field10 !== 0) {
      obj.field10 = Math.round(message.field10);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FormatInitializationMetadata>, I>>(base?: I): FormatInitializationMetadata {
    return FormatInitializationMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FormatInitializationMetadata>, I>>(object: I): FormatInitializationMetadata {
    const message = createBaseFormatInitializationMetadata();
    message.videoId = object.videoId ?? "";
    message.formatId = (object.formatId !== undefined && object.formatId !== null)
      ? FormatId.fromPartial(object.formatId)
      : undefined;
    message.endTimeMs = object.endTimeMs ?? 0;
    message.endSegmentNumber = object.endSegmentNumber ?? 0;
    message.mimeType = object.mimeType ?? "";
    message.initRange = (object.initRange !== undefined && object.initRange !== null)
      ? InitRange.fromPartial(object.initRange)
      : undefined;
    message.indexRange = (object.indexRange !== undefined && object.indexRange !== null)
      ? IndexRange.fromPartial(object.indexRange)
      : undefined;
    message.field8 = object.field8 ?? 0;
    message.durationMs = object.durationMs ?? 0;
    message.field10 = object.field10 ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
