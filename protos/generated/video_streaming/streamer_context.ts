// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.0
// source: video_streaming/streamer_context.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "video_streaming";

export interface StreamerContext {
  clientInfo?: StreamerContext_ClientInfo | undefined;
  poToken?: Uint8Array | undefined;
  playbackCookie?: Uint8Array | undefined;
  gp?: Uint8Array | undefined;
  field5: StreamerContext_Fqa[];
  field6: number[];
  field7?: string | undefined;
  field8?: StreamerContext_Gqa | undefined;
}

export interface StreamerContext_ClientInfo {
  deviceMake?: string | undefined;
  deviceModel?: string | undefined;
  clientName?: number | undefined;
  clientVersion?: string | undefined;
  osName?: string | undefined;
  osVersion?: string | undefined;
}

export interface StreamerContext_Fqa {
  type?: number | undefined;
  value?: Uint8Array | undefined;
}

export interface StreamerContext_Gqa {
  field1?: Uint8Array | undefined;
  field2?: StreamerContext_Gqa_Hqa | undefined;
}

export interface StreamerContext_Gqa_Hqa {
  code?: number | undefined;
  message?: string | undefined;
}

function createBaseStreamerContext(): StreamerContext {
  return {
    clientInfo: undefined,
    poToken: undefined,
    playbackCookie: undefined,
    gp: undefined,
    field5: [],
    field6: [],
    field7: undefined,
    field8: undefined,
  };
}

export const StreamerContext: MessageFns<StreamerContext> = {
  encode(message: StreamerContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clientInfo !== undefined) {
      StreamerContext_ClientInfo.encode(message.clientInfo, writer.uint32(10).fork()).join();
    }
    if (message.poToken !== undefined) {
      writer.uint32(18).bytes(message.poToken);
    }
    if (message.playbackCookie !== undefined) {
      writer.uint32(26).bytes(message.playbackCookie);
    }
    if (message.gp !== undefined) {
      writer.uint32(34).bytes(message.gp);
    }
    for (const v of message.field5) {
      StreamerContext_Fqa.encode(v!, writer.uint32(42).fork()).join();
    }
    writer.uint32(50).fork();
    for (const v of message.field6) {
      writer.int32(v);
    }
    writer.join();
    if (message.field7 !== undefined) {
      writer.uint32(58).string(message.field7);
    }
    if (message.field8 !== undefined) {
      StreamerContext_Gqa.encode(message.field8, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamerContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamerContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clientInfo = StreamerContext_ClientInfo.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.poToken = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.playbackCookie = reader.bytes();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.gp = reader.bytes();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.field5.push(StreamerContext_Fqa.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag === 48) {
            message.field6.push(reader.int32());

            continue;
          }

          if (tag === 50) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.field6.push(reader.int32());
            }

            continue;
          }

          break;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.field7 = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.field8 = StreamerContext_Gqa.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamerContext {
    return {
      clientInfo: isSet(object.clientInfo) ? StreamerContext_ClientInfo.fromJSON(object.clientInfo) : undefined,
      poToken: isSet(object.poToken) ? bytesFromBase64(object.poToken) : undefined,
      playbackCookie: isSet(object.playbackCookie) ? bytesFromBase64(object.playbackCookie) : undefined,
      gp: isSet(object.gp) ? bytesFromBase64(object.gp) : undefined,
      field5: globalThis.Array.isArray(object?.field5)
        ? object.field5.map((e: any) => StreamerContext_Fqa.fromJSON(e))
        : [],
      field6: globalThis.Array.isArray(object?.field6) ? object.field6.map((e: any) => globalThis.Number(e)) : [],
      field7: isSet(object.field7) ? globalThis.String(object.field7) : undefined,
      field8: isSet(object.field8) ? StreamerContext_Gqa.fromJSON(object.field8) : undefined,
    };
  },

  toJSON(message: StreamerContext): unknown {
    const obj: any = {};
    if (message.clientInfo !== undefined) {
      obj.clientInfo = StreamerContext_ClientInfo.toJSON(message.clientInfo);
    }
    if (message.poToken !== undefined) {
      obj.poToken = base64FromBytes(message.poToken);
    }
    if (message.playbackCookie !== undefined) {
      obj.playbackCookie = base64FromBytes(message.playbackCookie);
    }
    if (message.gp !== undefined) {
      obj.gp = base64FromBytes(message.gp);
    }
    if (message.field5?.length) {
      obj.field5 = message.field5.map((e) => StreamerContext_Fqa.toJSON(e));
    }
    if (message.field6?.length) {
      obj.field6 = message.field6.map((e) => Math.round(e));
    }
    if (message.field7 !== undefined) {
      obj.field7 = message.field7;
    }
    if (message.field8 !== undefined) {
      obj.field8 = StreamerContext_Gqa.toJSON(message.field8);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamerContext>, I>>(base?: I): StreamerContext {
    return StreamerContext.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamerContext>, I>>(object: I): StreamerContext {
    const message = createBaseStreamerContext();
    message.clientInfo = (object.clientInfo !== undefined && object.clientInfo !== null)
      ? StreamerContext_ClientInfo.fromPartial(object.clientInfo)
      : undefined;
    message.poToken = object.poToken ?? undefined;
    message.playbackCookie = object.playbackCookie ?? undefined;
    message.gp = object.gp ?? undefined;
    message.field5 = object.field5?.map((e) => StreamerContext_Fqa.fromPartial(e)) || [];
    message.field6 = object.field6?.map((e) => e) || [];
    message.field7 = object.field7 ?? undefined;
    message.field8 = (object.field8 !== undefined && object.field8 !== null)
      ? StreamerContext_Gqa.fromPartial(object.field8)
      : undefined;
    return message;
  },
};

function createBaseStreamerContext_ClientInfo(): StreamerContext_ClientInfo {
  return {
    deviceMake: undefined,
    deviceModel: undefined,
    clientName: undefined,
    clientVersion: undefined,
    osName: undefined,
    osVersion: undefined,
  };
}

export const StreamerContext_ClientInfo: MessageFns<StreamerContext_ClientInfo> = {
  encode(message: StreamerContext_ClientInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.deviceMake !== undefined) {
      writer.uint32(98).string(message.deviceMake);
    }
    if (message.deviceModel !== undefined) {
      writer.uint32(106).string(message.deviceModel);
    }
    if (message.clientName !== undefined) {
      writer.uint32(128).int32(message.clientName);
    }
    if (message.clientVersion !== undefined) {
      writer.uint32(138).string(message.clientVersion);
    }
    if (message.osName !== undefined) {
      writer.uint32(146).string(message.osName);
    }
    if (message.osVersion !== undefined) {
      writer.uint32(154).string(message.osVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamerContext_ClientInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamerContext_ClientInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 12:
          if (tag !== 98) {
            break;
          }

          message.deviceMake = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.deviceModel = reader.string();
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }

          message.clientName = reader.int32();
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.clientVersion = reader.string();
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.osName = reader.string();
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.osVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamerContext_ClientInfo {
    return {
      deviceMake: isSet(object.deviceMake) ? globalThis.String(object.deviceMake) : undefined,
      deviceModel: isSet(object.deviceModel) ? globalThis.String(object.deviceModel) : undefined,
      clientName: isSet(object.clientName) ? globalThis.Number(object.clientName) : undefined,
      clientVersion: isSet(object.clientVersion) ? globalThis.String(object.clientVersion) : undefined,
      osName: isSet(object.osName) ? globalThis.String(object.osName) : undefined,
      osVersion: isSet(object.osVersion) ? globalThis.String(object.osVersion) : undefined,
    };
  },

  toJSON(message: StreamerContext_ClientInfo): unknown {
    const obj: any = {};
    if (message.deviceMake !== undefined) {
      obj.deviceMake = message.deviceMake;
    }
    if (message.deviceModel !== undefined) {
      obj.deviceModel = message.deviceModel;
    }
    if (message.clientName !== undefined) {
      obj.clientName = Math.round(message.clientName);
    }
    if (message.clientVersion !== undefined) {
      obj.clientVersion = message.clientVersion;
    }
    if (message.osName !== undefined) {
      obj.osName = message.osName;
    }
    if (message.osVersion !== undefined) {
      obj.osVersion = message.osVersion;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamerContext_ClientInfo>, I>>(base?: I): StreamerContext_ClientInfo {
    return StreamerContext_ClientInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamerContext_ClientInfo>, I>>(object: I): StreamerContext_ClientInfo {
    const message = createBaseStreamerContext_ClientInfo();
    message.deviceMake = object.deviceMake ?? undefined;
    message.deviceModel = object.deviceModel ?? undefined;
    message.clientName = object.clientName ?? undefined;
    message.clientVersion = object.clientVersion ?? undefined;
    message.osName = object.osName ?? undefined;
    message.osVersion = object.osVersion ?? undefined;
    return message;
  },
};

function createBaseStreamerContext_Fqa(): StreamerContext_Fqa {
  return { type: undefined, value: undefined };
}

export const StreamerContext_Fqa: MessageFns<StreamerContext_Fqa> = {
  encode(message: StreamerContext_Fqa, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== undefined) {
      writer.uint32(8).int32(message.type);
    }
    if (message.value !== undefined) {
      writer.uint32(18).bytes(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamerContext_Fqa {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamerContext_Fqa();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamerContext_Fqa {
    return {
      type: isSet(object.type) ? globalThis.Number(object.type) : undefined,
      value: isSet(object.value) ? bytesFromBase64(object.value) : undefined,
    };
  },

  toJSON(message: StreamerContext_Fqa): unknown {
    const obj: any = {};
    if (message.type !== undefined) {
      obj.type = Math.round(message.type);
    }
    if (message.value !== undefined) {
      obj.value = base64FromBytes(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamerContext_Fqa>, I>>(base?: I): StreamerContext_Fqa {
    return StreamerContext_Fqa.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamerContext_Fqa>, I>>(object: I): StreamerContext_Fqa {
    const message = createBaseStreamerContext_Fqa();
    message.type = object.type ?? undefined;
    message.value = object.value ?? undefined;
    return message;
  },
};

function createBaseStreamerContext_Gqa(): StreamerContext_Gqa {
  return { field1: undefined, field2: undefined };
}

export const StreamerContext_Gqa: MessageFns<StreamerContext_Gqa> = {
  encode(message: StreamerContext_Gqa, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.field1 !== undefined) {
      writer.uint32(10).bytes(message.field1);
    }
    if (message.field2 !== undefined) {
      StreamerContext_Gqa_Hqa.encode(message.field2, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamerContext_Gqa {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamerContext_Gqa();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.field1 = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.field2 = StreamerContext_Gqa_Hqa.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamerContext_Gqa {
    return {
      field1: isSet(object.field1) ? bytesFromBase64(object.field1) : undefined,
      field2: isSet(object.field2) ? StreamerContext_Gqa_Hqa.fromJSON(object.field2) : undefined,
    };
  },

  toJSON(message: StreamerContext_Gqa): unknown {
    const obj: any = {};
    if (message.field1 !== undefined) {
      obj.field1 = base64FromBytes(message.field1);
    }
    if (message.field2 !== undefined) {
      obj.field2 = StreamerContext_Gqa_Hqa.toJSON(message.field2);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamerContext_Gqa>, I>>(base?: I): StreamerContext_Gqa {
    return StreamerContext_Gqa.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamerContext_Gqa>, I>>(object: I): StreamerContext_Gqa {
    const message = createBaseStreamerContext_Gqa();
    message.field1 = object.field1 ?? undefined;
    message.field2 = (object.field2 !== undefined && object.field2 !== null)
      ? StreamerContext_Gqa_Hqa.fromPartial(object.field2)
      : undefined;
    return message;
  },
};

function createBaseStreamerContext_Gqa_Hqa(): StreamerContext_Gqa_Hqa {
  return { code: undefined, message: undefined };
}

export const StreamerContext_Gqa_Hqa: MessageFns<StreamerContext_Gqa_Hqa> = {
  encode(message: StreamerContext_Gqa_Hqa, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== undefined) {
      writer.uint32(8).int32(message.code);
    }
    if (message.message !== undefined) {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamerContext_Gqa_Hqa {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamerContext_Gqa_Hqa();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamerContext_Gqa_Hqa {
    return {
      code: isSet(object.code) ? globalThis.Number(object.code) : undefined,
      message: isSet(object.message) ? globalThis.String(object.message) : undefined,
    };
  },

  toJSON(message: StreamerContext_Gqa_Hqa): unknown {
    const obj: any = {};
    if (message.code !== undefined) {
      obj.code = Math.round(message.code);
    }
    if (message.message !== undefined) {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamerContext_Gqa_Hqa>, I>>(base?: I): StreamerContext_Gqa_Hqa {
    return StreamerContext_Gqa_Hqa.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamerContext_Gqa_Hqa>, I>>(object: I): StreamerContext_Gqa_Hqa {
    const message = createBaseStreamerContext_Gqa_Hqa();
    message.code = object.code ?? undefined;
    message.message = object.message ?? undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  const bin = globalThis.atob(b64);
  const arr = new Uint8Array(bin.length);
  for (let i = 0; i < bin.length; ++i) {
    arr[i] = bin.charCodeAt(i);
  }
  return arr;
}

function base64FromBytes(arr: Uint8Array): string {
  const bin: string[] = [];
  arr.forEach((byte) => {
    bin.push(globalThis.String.fromCharCode(byte));
  });
  return globalThis.btoa(bin.join(""));
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
