// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.0
// source: video_streaming/encrypted_request.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "video_streaming";

export interface EncryptedRequest {
  encryptedOnesieRequest?: Uint8Array | undefined;
  encryptedClientKey?: Uint8Array | undefined;
  iv?: Uint8Array | undefined;
  hmac?: Uint8Array | undefined;
  YP?: boolean | undefined;
  pM?: boolean | undefined;
  enableCompression?: boolean | undefined;
  TQ?: boolean | undefined;
}

function createBaseEncryptedRequest(): EncryptedRequest {
  return {
    encryptedOnesieRequest: undefined,
    encryptedClientKey: undefined,
    iv: undefined,
    hmac: undefined,
    YP: undefined,
    pM: undefined,
    enableCompression: undefined,
    TQ: undefined,
  };
}

export const EncryptedRequest: MessageFns<EncryptedRequest> = {
  encode(message: EncryptedRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.encryptedOnesieRequest !== undefined) {
      writer.uint32(18).bytes(message.encryptedOnesieRequest);
    }
    if (message.encryptedClientKey !== undefined) {
      writer.uint32(42).bytes(message.encryptedClientKey);
    }
    if (message.iv !== undefined) {
      writer.uint32(50).bytes(message.iv);
    }
    if (message.hmac !== undefined) {
      writer.uint32(58).bytes(message.hmac);
    }
    if (message.YP !== undefined) {
      writer.uint32(80).bool(message.YP);
    }
    if (message.pM !== undefined) {
      writer.uint32(104).bool(message.pM);
    }
    if (message.enableCompression !== undefined) {
      writer.uint32(112).bool(message.enableCompression);
    }
    if (message.TQ !== undefined) {
      writer.uint32(136).bool(message.TQ);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EncryptedRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEncryptedRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.encryptedOnesieRequest = reader.bytes();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.encryptedClientKey = reader.bytes();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.iv = reader.bytes();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.hmac = reader.bytes();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.YP = reader.bool();
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.pM = reader.bool();
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.enableCompression = reader.bool();
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }

          message.TQ = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EncryptedRequest {
    return {
      encryptedOnesieRequest: isSet(object.encryptedOnesieRequest)
        ? bytesFromBase64(object.encryptedOnesieRequest)
        : undefined,
      encryptedClientKey: isSet(object.encryptedClientKey) ? bytesFromBase64(object.encryptedClientKey) : undefined,
      iv: isSet(object.iv) ? bytesFromBase64(object.iv) : undefined,
      hmac: isSet(object.hmac) ? bytesFromBase64(object.hmac) : undefined,
      YP: isSet(object.YP) ? globalThis.Boolean(object.YP) : undefined,
      pM: isSet(object.pM) ? globalThis.Boolean(object.pM) : undefined,
      enableCompression: isSet(object.enableCompression) ? globalThis.Boolean(object.enableCompression) : undefined,
      TQ: isSet(object.TQ) ? globalThis.Boolean(object.TQ) : undefined,
    };
  },

  toJSON(message: EncryptedRequest): unknown {
    const obj: any = {};
    if (message.encryptedOnesieRequest !== undefined) {
      obj.encryptedOnesieRequest = base64FromBytes(message.encryptedOnesieRequest);
    }
    if (message.encryptedClientKey !== undefined) {
      obj.encryptedClientKey = base64FromBytes(message.encryptedClientKey);
    }
    if (message.iv !== undefined) {
      obj.iv = base64FromBytes(message.iv);
    }
    if (message.hmac !== undefined) {
      obj.hmac = base64FromBytes(message.hmac);
    }
    if (message.YP !== undefined) {
      obj.YP = message.YP;
    }
    if (message.pM !== undefined) {
      obj.pM = message.pM;
    }
    if (message.enableCompression !== undefined) {
      obj.enableCompression = message.enableCompression;
    }
    if (message.TQ !== undefined) {
      obj.TQ = message.TQ;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EncryptedRequest>, I>>(base?: I): EncryptedRequest {
    return EncryptedRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EncryptedRequest>, I>>(object: I): EncryptedRequest {
    const message = createBaseEncryptedRequest();
    message.encryptedOnesieRequest = object.encryptedOnesieRequest ?? undefined;
    message.encryptedClientKey = object.encryptedClientKey ?? undefined;
    message.iv = object.iv ?? undefined;
    message.hmac = object.hmac ?? undefined;
    message.YP = object.YP ?? undefined;
    message.pM = object.pM ?? undefined;
    message.enableCompression = object.enableCompression ?? undefined;
    message.TQ = object.TQ ?? undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  const bin = globalThis.atob(b64);
  const arr = new Uint8Array(bin.length);
  for (let i = 0; i < bin.length; ++i) {
    arr[i] = bin.charCodeAt(i);
  }
  return arr;
}

function base64FromBytes(arr: Uint8Array): string {
  const bin: string[] = [];
  arr.forEach((byte) => {
    bin.push(globalThis.String.fromCharCode(byte));
  });
  return globalThis.btoa(bin.join(""));
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
