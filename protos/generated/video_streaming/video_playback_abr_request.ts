// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.28.0
// source: video_streaming/video_playback_abr_request.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { FormatId } from "../misc/common.js";
import { BufferedRange } from "./buffered_range.js";
import { ClientAbrState } from "./client_abr_state.js";
import { StreamerContext } from "./streamer_context.js";
import { TimeRange } from "./time_range.js";

export const protobufPackage = "video_streaming";

export interface VideoPlaybackAbrRequest {
  clientAbrState?: ClientAbrState | undefined;
  selectedFormatIds: FormatId[];
  bufferedRanges: BufferedRange[];
  /** `osts` (Onesie Start Time Seconds) param on Onesie requests. */
  playerTimeMs?: string | undefined;
  videoPlaybackUstreamerConfig?: Uint8Array | undefined;
  field6?:
    | UnknownMessage1
    | undefined;
  /** `pai` (Preferred Audio Itags) param on Onesie requests. */
  preferredAudioFormatIds: FormatId[];
  /** `pvi` (Preferred Video Itags) param on Onesie requests. */
  preferredVideoFormatIds: FormatId[];
  preferredSubtitleFormatIds: FormatId[];
  streamerContext?: StreamerContext | undefined;
  field21?: UnknownMessage2 | undefined;
  field22?: number | undefined;
  field23?: number | undefined;
  field1000: UnknownMessage3[];
}

export interface UnknownMessage1 {
  formatId?: FormatId | undefined;
  lmt?: string | undefined;
  sequenceNumber?: number | undefined;
  timeRange?: TimeRange | undefined;
  field5?: number | undefined;
}

export interface UnknownMessage2 {
  field1: string[];
  field2?: Uint8Array | undefined;
  field3?: string | undefined;
  field4?: number | undefined;
  field5?: number | undefined;
  field6?: string | undefined;
}

export interface UnknownMessage3 {
  formatIds: FormatId[];
  ud: BufferedRange[];
  clipId?: string | undefined;
}

function createBaseVideoPlaybackAbrRequest(): VideoPlaybackAbrRequest {
  return {
    clientAbrState: undefined,
    selectedFormatIds: [],
    bufferedRanges: [],
    playerTimeMs: "0",
    videoPlaybackUstreamerConfig: new Uint8Array(0),
    field6: undefined,
    preferredAudioFormatIds: [],
    preferredVideoFormatIds: [],
    preferredSubtitleFormatIds: [],
    streamerContext: undefined,
    field21: undefined,
    field22: 0,
    field23: 0,
    field1000: [],
  };
}

export const VideoPlaybackAbrRequest: MessageFns<VideoPlaybackAbrRequest> = {
  encode(message: VideoPlaybackAbrRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clientAbrState !== undefined) {
      ClientAbrState.encode(message.clientAbrState, writer.uint32(10).fork()).join();
    }
    for (const v of message.selectedFormatIds) {
      FormatId.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.bufferedRanges) {
      BufferedRange.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.playerTimeMs !== undefined && message.playerTimeMs !== "0") {
      writer.uint32(32).int64(message.playerTimeMs);
    }
    if (message.videoPlaybackUstreamerConfig !== undefined && message.videoPlaybackUstreamerConfig.length !== 0) {
      writer.uint32(42).bytes(message.videoPlaybackUstreamerConfig);
    }
    if (message.field6 !== undefined) {
      UnknownMessage1.encode(message.field6, writer.uint32(50).fork()).join();
    }
    for (const v of message.preferredAudioFormatIds) {
      FormatId.encode(v!, writer.uint32(130).fork()).join();
    }
    for (const v of message.preferredVideoFormatIds) {
      FormatId.encode(v!, writer.uint32(138).fork()).join();
    }
    for (const v of message.preferredSubtitleFormatIds) {
      FormatId.encode(v!, writer.uint32(146).fork()).join();
    }
    if (message.streamerContext !== undefined) {
      StreamerContext.encode(message.streamerContext, writer.uint32(154).fork()).join();
    }
    if (message.field21 !== undefined) {
      UnknownMessage2.encode(message.field21, writer.uint32(170).fork()).join();
    }
    if (message.field22 !== undefined && message.field22 !== 0) {
      writer.uint32(176).int32(message.field22);
    }
    if (message.field23 !== undefined && message.field23 !== 0) {
      writer.uint32(184).int32(message.field23);
    }
    for (const v of message.field1000) {
      UnknownMessage3.encode(v!, writer.uint32(8002).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VideoPlaybackAbrRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVideoPlaybackAbrRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.clientAbrState = ClientAbrState.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.selectedFormatIds.push(FormatId.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.bufferedRanges.push(BufferedRange.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.playerTimeMs = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.videoPlaybackUstreamerConfig = reader.bytes();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.field6 = UnknownMessage1.decode(reader, reader.uint32());
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.preferredAudioFormatIds.push(FormatId.decode(reader, reader.uint32()));
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.preferredVideoFormatIds.push(FormatId.decode(reader, reader.uint32()));
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.preferredSubtitleFormatIds.push(FormatId.decode(reader, reader.uint32()));
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.streamerContext = StreamerContext.decode(reader, reader.uint32());
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.field21 = UnknownMessage2.decode(reader, reader.uint32());
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.field22 = reader.int32();
          continue;
        }
        case 23: {
          if (tag !== 184) {
            break;
          }

          message.field23 = reader.int32();
          continue;
        }
        case 1000: {
          if (tag !== 8002) {
            break;
          }

          message.field1000.push(UnknownMessage3.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseUnknownMessage1(): UnknownMessage1 {
  return { formatId: undefined, lmt: "0", sequenceNumber: 0, timeRange: undefined, field5: 0 };
}

export const UnknownMessage1: MessageFns<UnknownMessage1> = {
  encode(message: UnknownMessage1, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.formatId !== undefined) {
      FormatId.encode(message.formatId, writer.uint32(10).fork()).join();
    }
    if (message.lmt !== undefined && message.lmt !== "0") {
      writer.uint32(16).sint64(message.lmt);
    }
    if (message.sequenceNumber !== undefined && message.sequenceNumber !== 0) {
      writer.uint32(24).int32(message.sequenceNumber);
    }
    if (message.timeRange !== undefined) {
      TimeRange.encode(message.timeRange, writer.uint32(34).fork()).join();
    }
    if (message.field5 !== undefined && message.field5 !== 0) {
      writer.uint32(40).int32(message.field5);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnknownMessage1 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnknownMessage1();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.formatId = FormatId.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.lmt = reader.sint64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.sequenceNumber = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.timeRange = TimeRange.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.field5 = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseUnknownMessage2(): UnknownMessage2 {
  return { field1: [], field2: new Uint8Array(0), field3: "", field4: 0, field5: 0, field6: "" };
}

export const UnknownMessage2: MessageFns<UnknownMessage2> = {
  encode(message: UnknownMessage2, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.field1) {
      writer.uint32(10).string(v!);
    }
    if (message.field2 !== undefined && message.field2.length !== 0) {
      writer.uint32(18).bytes(message.field2);
    }
    if (message.field3 !== undefined && message.field3 !== "") {
      writer.uint32(26).string(message.field3);
    }
    if (message.field4 !== undefined && message.field4 !== 0) {
      writer.uint32(32).int32(message.field4);
    }
    if (message.field5 !== undefined && message.field5 !== 0) {
      writer.uint32(40).int32(message.field5);
    }
    if (message.field6 !== undefined && message.field6 !== "") {
      writer.uint32(50).string(message.field6);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnknownMessage2 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnknownMessage2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.field1.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.field2 = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.field3 = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.field4 = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.field5 = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.field6 = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseUnknownMessage3(): UnknownMessage3 {
  return { formatIds: [], ud: [], clipId: "" };
}

export const UnknownMessage3: MessageFns<UnknownMessage3> = {
  encode(message: UnknownMessage3, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.formatIds) {
      FormatId.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.ud) {
      BufferedRange.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.clipId !== undefined && message.clipId !== "") {
      writer.uint32(26).string(message.clipId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnknownMessage3 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnknownMessage3();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.formatIds.push(FormatId.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ud.push(BufferedRange.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.clipId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
