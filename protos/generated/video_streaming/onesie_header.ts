// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.0
// source: video_streaming/onesie_header.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { CryptoParams } from "./crypto_params.js";
import { OnesieHeaderType, onesieHeaderTypeFromJSON, onesieHeaderTypeToJSON } from "./onesie_header_type.js";

export const protobufPackage = "video_streaming";

export interface OnesieHeader {
  type?: OnesieHeaderType | undefined;
  videoId?: string | undefined;
  itag?: string | undefined;
  cryptoParams?: CryptoParams | undefined;
  lastModified?: number | undefined;
  mediaSizeBytes?: number | undefined;
  restrictedFormats: string[];
  xtags?: string | undefined;
  sequenceNumber?: number | undefined;
  field23?: OnesieHeader_Field23 | undefined;
  field34?: OnesieHeader_Field34 | undefined;
}

export interface OnesieHeader_Field23 {
  videoId?: string | undefined;
}

export interface OnesieHeader_Field34 {
  itagDenylist: string[];
}

function createBaseOnesieHeader(): OnesieHeader {
  return {
    type: 0,
    videoId: "",
    itag: "",
    cryptoParams: undefined,
    lastModified: 0,
    mediaSizeBytes: 0,
    restrictedFormats: [],
    xtags: "",
    sequenceNumber: 0,
    field23: undefined,
    field34: undefined,
  };
}

export const OnesieHeader: MessageFns<OnesieHeader> = {
  encode(message: OnesieHeader, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== undefined && message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.videoId !== undefined && message.videoId !== "") {
      writer.uint32(18).string(message.videoId);
    }
    if (message.itag !== undefined && message.itag !== "") {
      writer.uint32(26).string(message.itag);
    }
    if (message.cryptoParams !== undefined) {
      CryptoParams.encode(message.cryptoParams, writer.uint32(34).fork()).join();
    }
    if (message.lastModified !== undefined && message.lastModified !== 0) {
      writer.uint32(40).uint64(message.lastModified);
    }
    if (message.mediaSizeBytes !== undefined && message.mediaSizeBytes !== 0) {
      writer.uint32(56).int64(message.mediaSizeBytes);
    }
    for (const v of message.restrictedFormats) {
      writer.uint32(90).string(v!);
    }
    if (message.xtags !== undefined && message.xtags !== "") {
      writer.uint32(122).string(message.xtags);
    }
    if (message.sequenceNumber !== undefined && message.sequenceNumber !== 0) {
      writer.uint32(144).int64(message.sequenceNumber);
    }
    if (message.field23 !== undefined) {
      OnesieHeader_Field23.encode(message.field23, writer.uint32(186).fork()).join();
    }
    if (message.field34 !== undefined) {
      OnesieHeader_Field34.encode(message.field34, writer.uint32(274).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnesieHeader {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnesieHeader();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.videoId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.itag = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.cryptoParams = CryptoParams.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.lastModified = longToNumber(reader.uint64());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.mediaSizeBytes = longToNumber(reader.int64());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.restrictedFormats.push(reader.string());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.xtags = reader.string();
          continue;
        case 18:
          if (tag !== 144) {
            break;
          }

          message.sequenceNumber = longToNumber(reader.int64());
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.field23 = OnesieHeader_Field23.decode(reader, reader.uint32());
          continue;
        case 34:
          if (tag !== 274) {
            break;
          }

          message.field34 = OnesieHeader_Field34.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnesieHeader {
    return {
      type: isSet(object.type) ? onesieHeaderTypeFromJSON(object.type) : 0,
      videoId: isSet(object.videoId) ? globalThis.String(object.videoId) : "",
      itag: isSet(object.itag) ? globalThis.String(object.itag) : "",
      cryptoParams: isSet(object.cryptoParams) ? CryptoParams.fromJSON(object.cryptoParams) : undefined,
      lastModified: isSet(object.lastModified) ? globalThis.Number(object.lastModified) : 0,
      mediaSizeBytes: isSet(object.mediaSizeBytes) ? globalThis.Number(object.mediaSizeBytes) : 0,
      restrictedFormats: globalThis.Array.isArray(object?.restrictedFormats)
        ? object.restrictedFormats.map((e: any) => globalThis.String(e))
        : [],
      xtags: isSet(object.xtags) ? globalThis.String(object.xtags) : "",
      sequenceNumber: isSet(object.sequenceNumber) ? globalThis.Number(object.sequenceNumber) : 0,
      field23: isSet(object.field23) ? OnesieHeader_Field23.fromJSON(object.field23) : undefined,
      field34: isSet(object.field34) ? OnesieHeader_Field34.fromJSON(object.field34) : undefined,
    };
  },

  toJSON(message: OnesieHeader): unknown {
    const obj: any = {};
    if (message.type !== undefined && message.type !== 0) {
      obj.type = onesieHeaderTypeToJSON(message.type);
    }
    if (message.videoId !== undefined && message.videoId !== "") {
      obj.videoId = message.videoId;
    }
    if (message.itag !== undefined && message.itag !== "") {
      obj.itag = message.itag;
    }
    if (message.cryptoParams !== undefined) {
      obj.cryptoParams = CryptoParams.toJSON(message.cryptoParams);
    }
    if (message.lastModified !== undefined && message.lastModified !== 0) {
      obj.lastModified = Math.round(message.lastModified);
    }
    if (message.mediaSizeBytes !== undefined && message.mediaSizeBytes !== 0) {
      obj.mediaSizeBytes = Math.round(message.mediaSizeBytes);
    }
    if (message.restrictedFormats?.length) {
      obj.restrictedFormats = message.restrictedFormats;
    }
    if (message.xtags !== undefined && message.xtags !== "") {
      obj.xtags = message.xtags;
    }
    if (message.sequenceNumber !== undefined && message.sequenceNumber !== 0) {
      obj.sequenceNumber = Math.round(message.sequenceNumber);
    }
    if (message.field23 !== undefined) {
      obj.field23 = OnesieHeader_Field23.toJSON(message.field23);
    }
    if (message.field34 !== undefined) {
      obj.field34 = OnesieHeader_Field34.toJSON(message.field34);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OnesieHeader>, I>>(base?: I): OnesieHeader {
    return OnesieHeader.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OnesieHeader>, I>>(object: I): OnesieHeader {
    const message = createBaseOnesieHeader();
    message.type = object.type ?? 0;
    message.videoId = object.videoId ?? "";
    message.itag = object.itag ?? "";
    message.cryptoParams = (object.cryptoParams !== undefined && object.cryptoParams !== null)
      ? CryptoParams.fromPartial(object.cryptoParams)
      : undefined;
    message.lastModified = object.lastModified ?? 0;
    message.mediaSizeBytes = object.mediaSizeBytes ?? 0;
    message.restrictedFormats = object.restrictedFormats?.map((e) => e) || [];
    message.xtags = object.xtags ?? "";
    message.sequenceNumber = object.sequenceNumber ?? 0;
    message.field23 = (object.field23 !== undefined && object.field23 !== null)
      ? OnesieHeader_Field23.fromPartial(object.field23)
      : undefined;
    message.field34 = (object.field34 !== undefined && object.field34 !== null)
      ? OnesieHeader_Field34.fromPartial(object.field34)
      : undefined;
    return message;
  },
};

function createBaseOnesieHeader_Field23(): OnesieHeader_Field23 {
  return { videoId: "" };
}

export const OnesieHeader_Field23: MessageFns<OnesieHeader_Field23> = {
  encode(message: OnesieHeader_Field23, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.videoId !== undefined && message.videoId !== "") {
      writer.uint32(18).string(message.videoId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnesieHeader_Field23 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnesieHeader_Field23();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.videoId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnesieHeader_Field23 {
    return { videoId: isSet(object.videoId) ? globalThis.String(object.videoId) : "" };
  },

  toJSON(message: OnesieHeader_Field23): unknown {
    const obj: any = {};
    if (message.videoId !== undefined && message.videoId !== "") {
      obj.videoId = message.videoId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OnesieHeader_Field23>, I>>(base?: I): OnesieHeader_Field23 {
    return OnesieHeader_Field23.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OnesieHeader_Field23>, I>>(object: I): OnesieHeader_Field23 {
    const message = createBaseOnesieHeader_Field23();
    message.videoId = object.videoId ?? "";
    return message;
  },
};

function createBaseOnesieHeader_Field34(): OnesieHeader_Field34 {
  return { itagDenylist: [] };
}

export const OnesieHeader_Field34: MessageFns<OnesieHeader_Field34> = {
  encode(message: OnesieHeader_Field34, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.itagDenylist) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnesieHeader_Field34 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnesieHeader_Field34();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.itagDenylist.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnesieHeader_Field34 {
    return {
      itagDenylist: globalThis.Array.isArray(object?.itagDenylist)
        ? object.itagDenylist.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: OnesieHeader_Field34): unknown {
    const obj: any = {};
    if (message.itagDenylist?.length) {
      obj.itagDenylist = message.itagDenylist;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OnesieHeader_Field34>, I>>(base?: I): OnesieHeader_Field34 {
    return OnesieHeader_Field34.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OnesieHeader_Field34>, I>>(object: I): OnesieHeader_Field34 {
    const message = createBaseOnesieHeader_Field34();
    message.itagDenylist = object.itagDenylist?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
