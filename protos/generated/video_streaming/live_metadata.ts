// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.0
// source: video_streaming/live_metadata.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "video_streaming";

export interface LiveMetadata {
  headSequenceNumber?: number | undefined;
  headTimeMs?: number | undefined;
  wallTimeMs?: number | undefined;
  field10?: number | undefined;
  field12?: number | undefined;
  field13?: number | undefined;
  headTimeUsec?: number | undefined;
  field15?: number | undefined;
}

function createBaseLiveMetadata(): LiveMetadata {
  return {
    headSequenceNumber: 0,
    headTimeMs: 0,
    wallTimeMs: 0,
    field10: 0,
    field12: 0,
    field13: 0,
    headTimeUsec: 0,
    field15: 0,
  };
}

export const LiveMetadata: MessageFns<LiveMetadata> = {
  encode(message: LiveMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.headSequenceNumber !== undefined && message.headSequenceNumber !== 0) {
      writer.uint32(24).uint32(message.headSequenceNumber);
    }
    if (message.headTimeMs !== undefined && message.headTimeMs !== 0) {
      writer.uint32(32).uint64(message.headTimeMs);
    }
    if (message.wallTimeMs !== undefined && message.wallTimeMs !== 0) {
      writer.uint32(40).uint64(message.wallTimeMs);
    }
    if (message.field10 !== undefined && message.field10 !== 0) {
      writer.uint32(80).uint64(message.field10);
    }
    if (message.field12 !== undefined && message.field12 !== 0) {
      writer.uint32(96).uint64(message.field12);
    }
    if (message.field13 !== undefined && message.field13 !== 0) {
      writer.uint32(104).uint64(message.field13);
    }
    if (message.headTimeUsec !== undefined && message.headTimeUsec !== 0) {
      writer.uint32(112).uint64(message.headTimeUsec);
    }
    if (message.field15 !== undefined && message.field15 !== 0) {
      writer.uint32(120).uint64(message.field15);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LiveMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLiveMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 24) {
            break;
          }

          message.headSequenceNumber = reader.uint32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.headTimeMs = longToNumber(reader.uint64());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.wallTimeMs = longToNumber(reader.uint64());
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.field10 = longToNumber(reader.uint64());
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.field12 = longToNumber(reader.uint64());
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.field13 = longToNumber(reader.uint64());
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.headTimeUsec = longToNumber(reader.uint64());
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }

          message.field15 = longToNumber(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
