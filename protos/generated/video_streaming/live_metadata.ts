// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.28.0
// source: video_streaming/live_metadata.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "video_streaming";

export interface LiveMetadata {
  broadcastId?: string | undefined;
  headSequenceNumber?: number | undefined;
  headTimeMs?: number | undefined;
  wallTimeMs?: number | undefined;
  videoId?: string | undefined;
  postLiveDvr?: boolean | undefined;
  headm?: number | undefined;
  minSeekableTimeTicks?: number | undefined;
  minSeekableTimescale?: number | undefined;
  maxSeekableTimeTicks?: number | undefined;
  maxSeekableTimescale?: number | undefined;
}

function createBaseLiveMetadata(): LiveMetadata {
  return {
    broadcastId: "",
    headSequenceNumber: 0,
    headTimeMs: 0,
    wallTimeMs: 0,
    videoId: "",
    postLiveDvr: false,
    headm: 0,
    minSeekableTimeTicks: 0,
    minSeekableTimescale: 0,
    maxSeekableTimeTicks: 0,
    maxSeekableTimescale: 0,
  };
}

export const LiveMetadata: MessageFns<LiveMetadata> = {
  encode(message: LiveMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.broadcastId !== undefined && message.broadcastId !== "") {
      writer.uint32(10).string(message.broadcastId);
    }
    if (message.headSequenceNumber !== undefined && message.headSequenceNumber !== 0) {
      writer.uint32(24).int64(message.headSequenceNumber);
    }
    if (message.headTimeMs !== undefined && message.headTimeMs !== 0) {
      writer.uint32(32).int64(message.headTimeMs);
    }
    if (message.wallTimeMs !== undefined && message.wallTimeMs !== 0) {
      writer.uint32(40).int64(message.wallTimeMs);
    }
    if (message.videoId !== undefined && message.videoId !== "") {
      writer.uint32(50).string(message.videoId);
    }
    if (message.postLiveDvr !== undefined && message.postLiveDvr !== false) {
      writer.uint32(64).bool(message.postLiveDvr);
    }
    if (message.headm !== undefined && message.headm !== 0) {
      writer.uint32(80).int64(message.headm);
    }
    if (message.minSeekableTimeTicks !== undefined && message.minSeekableTimeTicks !== 0) {
      writer.uint32(96).int64(message.minSeekableTimeTicks);
    }
    if (message.minSeekableTimescale !== undefined && message.minSeekableTimescale !== 0) {
      writer.uint32(104).int32(message.minSeekableTimescale);
    }
    if (message.maxSeekableTimeTicks !== undefined && message.maxSeekableTimeTicks !== 0) {
      writer.uint32(112).int64(message.maxSeekableTimeTicks);
    }
    if (message.maxSeekableTimescale !== undefined && message.maxSeekableTimescale !== 0) {
      writer.uint32(120).int32(message.maxSeekableTimescale);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LiveMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLiveMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.broadcastId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.headSequenceNumber = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.headTimeMs = longToNumber(reader.int64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.wallTimeMs = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.videoId = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.postLiveDvr = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.headm = longToNumber(reader.int64());
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.minSeekableTimeTicks = longToNumber(reader.int64());
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.minSeekableTimescale = reader.int32();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.maxSeekableTimeTicks = longToNumber(reader.int64());
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.maxSeekableTimescale = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
