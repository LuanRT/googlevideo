// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.0
// source: video_streaming/live_metadata.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "video_streaming";

export interface LiveMetadata {
  broadcastId?: string | undefined;
  headSequenceNumber?: number | undefined;
  headTimeMs?: number | undefined;
  wallTimeMs?: number | undefined;
  videoId?: string | undefined;
  postLiveDvr?: boolean | undefined;
  headm?: number | undefined;
  minSeekableTimeTicks?: number | undefined;
  minSeekableTimescale?: number | undefined;
  maxSeekableTimeTicks?: number | undefined;
  maxSeekableTimescale?: number | undefined;
}

function createBaseLiveMetadata(): LiveMetadata {
  return {
    broadcastId: "",
    headSequenceNumber: 0,
    headTimeMs: 0,
    wallTimeMs: 0,
    videoId: "",
    postLiveDvr: false,
    headm: 0,
    minSeekableTimeTicks: 0,
    minSeekableTimescale: 0,
    maxSeekableTimeTicks: 0,
    maxSeekableTimescale: 0,
  };
}

export const LiveMetadata: MessageFns<LiveMetadata> = {
  encode(message: LiveMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.broadcastId !== undefined && message.broadcastId !== "") {
      writer.uint32(10).string(message.broadcastId);
    }
    if (message.headSequenceNumber !== undefined && message.headSequenceNumber !== 0) {
      writer.uint32(24).int64(message.headSequenceNumber);
    }
    if (message.headTimeMs !== undefined && message.headTimeMs !== 0) {
      writer.uint32(32).int64(message.headTimeMs);
    }
    if (message.wallTimeMs !== undefined && message.wallTimeMs !== 0) {
      writer.uint32(40).int64(message.wallTimeMs);
    }
    if (message.videoId !== undefined && message.videoId !== "") {
      writer.uint32(50).string(message.videoId);
    }
    if (message.postLiveDvr !== undefined && message.postLiveDvr !== false) {
      writer.uint32(64).bool(message.postLiveDvr);
    }
    if (message.headm !== undefined && message.headm !== 0) {
      writer.uint32(80).int64(message.headm);
    }
    if (message.minSeekableTimeTicks !== undefined && message.minSeekableTimeTicks !== 0) {
      writer.uint32(96).int64(message.minSeekableTimeTicks);
    }
    if (message.minSeekableTimescale !== undefined && message.minSeekableTimescale !== 0) {
      writer.uint32(104).int32(message.minSeekableTimescale);
    }
    if (message.maxSeekableTimeTicks !== undefined && message.maxSeekableTimeTicks !== 0) {
      writer.uint32(112).int64(message.maxSeekableTimeTicks);
    }
    if (message.maxSeekableTimescale !== undefined && message.maxSeekableTimescale !== 0) {
      writer.uint32(120).int32(message.maxSeekableTimescale);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LiveMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLiveMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.broadcastId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.headSequenceNumber = longToNumber(reader.int64());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.headTimeMs = longToNumber(reader.int64());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.wallTimeMs = longToNumber(reader.int64());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.videoId = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.postLiveDvr = reader.bool();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.headm = longToNumber(reader.int64());
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.minSeekableTimeTicks = longToNumber(reader.int64());
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.minSeekableTimescale = reader.int32();
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.maxSeekableTimeTicks = longToNumber(reader.int64());
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }

          message.maxSeekableTimescale = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LiveMetadata {
    return {
      broadcastId: isSet(object.broadcastId) ? globalThis.String(object.broadcastId) : "",
      headSequenceNumber: isSet(object.headSequenceNumber) ? globalThis.Number(object.headSequenceNumber) : 0,
      headTimeMs: isSet(object.headTimeMs) ? globalThis.Number(object.headTimeMs) : 0,
      wallTimeMs: isSet(object.wallTimeMs) ? globalThis.Number(object.wallTimeMs) : 0,
      videoId: isSet(object.videoId) ? globalThis.String(object.videoId) : "",
      postLiveDvr: isSet(object.postLiveDvr) ? globalThis.Boolean(object.postLiveDvr) : false,
      headm: isSet(object.headm) ? globalThis.Number(object.headm) : 0,
      minSeekableTimeTicks: isSet(object.minSeekableTimeTicks) ? globalThis.Number(object.minSeekableTimeTicks) : 0,
      minSeekableTimescale: isSet(object.minSeekableTimescale) ? globalThis.Number(object.minSeekableTimescale) : 0,
      maxSeekableTimeTicks: isSet(object.maxSeekableTimeTicks) ? globalThis.Number(object.maxSeekableTimeTicks) : 0,
      maxSeekableTimescale: isSet(object.maxSeekableTimescale) ? globalThis.Number(object.maxSeekableTimescale) : 0,
    };
  },

  toJSON(message: LiveMetadata): unknown {
    const obj: any = {};
    if (message.broadcastId !== undefined && message.broadcastId !== "") {
      obj.broadcastId = message.broadcastId;
    }
    if (message.headSequenceNumber !== undefined && message.headSequenceNumber !== 0) {
      obj.headSequenceNumber = Math.round(message.headSequenceNumber);
    }
    if (message.headTimeMs !== undefined && message.headTimeMs !== 0) {
      obj.headTimeMs = Math.round(message.headTimeMs);
    }
    if (message.wallTimeMs !== undefined && message.wallTimeMs !== 0) {
      obj.wallTimeMs = Math.round(message.wallTimeMs);
    }
    if (message.videoId !== undefined && message.videoId !== "") {
      obj.videoId = message.videoId;
    }
    if (message.postLiveDvr !== undefined && message.postLiveDvr !== false) {
      obj.postLiveDvr = message.postLiveDvr;
    }
    if (message.headm !== undefined && message.headm !== 0) {
      obj.headm = Math.round(message.headm);
    }
    if (message.minSeekableTimeTicks !== undefined && message.minSeekableTimeTicks !== 0) {
      obj.minSeekableTimeTicks = Math.round(message.minSeekableTimeTicks);
    }
    if (message.minSeekableTimescale !== undefined && message.minSeekableTimescale !== 0) {
      obj.minSeekableTimescale = Math.round(message.minSeekableTimescale);
    }
    if (message.maxSeekableTimeTicks !== undefined && message.maxSeekableTimeTicks !== 0) {
      obj.maxSeekableTimeTicks = Math.round(message.maxSeekableTimeTicks);
    }
    if (message.maxSeekableTimescale !== undefined && message.maxSeekableTimescale !== 0) {
      obj.maxSeekableTimescale = Math.round(message.maxSeekableTimescale);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LiveMetadata>, I>>(base?: I): LiveMetadata {
    return LiveMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LiveMetadata>, I>>(object: I): LiveMetadata {
    const message = createBaseLiveMetadata();
    message.broadcastId = object.broadcastId ?? "";
    message.headSequenceNumber = object.headSequenceNumber ?? 0;
    message.headTimeMs = object.headTimeMs ?? 0;
    message.wallTimeMs = object.wallTimeMs ?? 0;
    message.videoId = object.videoId ?? "";
    message.postLiveDvr = object.postLiveDvr ?? false;
    message.headm = object.headm ?? 0;
    message.minSeekableTimeTicks = object.minSeekableTimeTicks ?? 0;
    message.minSeekableTimescale = object.minSeekableTimescale ?? 0;
    message.maxSeekableTimeTicks = object.maxSeekableTimeTicks ?? 0;
    message.maxSeekableTimescale = object.maxSeekableTimescale ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
