// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.29.3
// source: video_streaming/sabr_context_update.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "video_streaming";

export interface SabrContextUpdate {
  type?: number | undefined;
  scope?:
    | SabrContextUpdate_SabrContextScope
    | undefined;
  /** note: may be base64 encoded */
  value?: Uint8Array | undefined;
  sendByDefault?: boolean | undefined;
  writePolicy?: SabrContextUpdate_SabrContextWritePolicy | undefined;
}

export enum SabrContextUpdate_SabrContextScope {
  UNKNOWN = 0,
  PLAYBACK = 1,
  REQUEST = 2,
  WATCH_ENDPOINT = 3,
  CONTENT_ADS = 4,
  UNRECOGNIZED = -1,
}

export enum SabrContextUpdate_SabrContextWritePolicy {
  /** UNSPECIFIED - Whether to override existing sabr context updates? */
  UNSPECIFIED = 0,
  OVERWRITE = 1,
  KEEP_EXISTING = 2,
  UNRECOGNIZED = -1,
}

export interface SabrContextUpdate_SabrContext {
  type?: number | undefined;
  value?: Uint8Array | undefined;
}

function createBaseSabrContextUpdate(): SabrContextUpdate {
  return { type: 0, scope: 0, value: new Uint8Array(0), sendByDefault: false, writePolicy: 0 };
}

export const SabrContextUpdate: MessageFns<SabrContextUpdate> = {
  encode(message: SabrContextUpdate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== undefined && message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.scope !== undefined && message.scope !== 0) {
      writer.uint32(16).int32(message.scope);
    }
    if (message.value !== undefined && message.value.length !== 0) {
      writer.uint32(26).bytes(message.value);
    }
    if (message.sendByDefault !== undefined && message.sendByDefault !== false) {
      writer.uint32(32).bool(message.sendByDefault);
    }
    if (message.writePolicy !== undefined && message.writePolicy !== 0) {
      writer.uint32(40).int32(message.writePolicy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SabrContextUpdate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSabrContextUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.scope = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.value = reader.bytes();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.sendByDefault = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.writePolicy = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseSabrContextUpdate_SabrContext(): SabrContextUpdate_SabrContext {
  return { type: 0, value: new Uint8Array(0) };
}

export const SabrContextUpdate_SabrContext: MessageFns<SabrContextUpdate_SabrContext> = {
  encode(message: SabrContextUpdate_SabrContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== undefined && message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.value !== undefined && message.value.length !== 0) {
      writer.uint32(18).bytes(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SabrContextUpdate_SabrContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSabrContextUpdate_SabrContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
