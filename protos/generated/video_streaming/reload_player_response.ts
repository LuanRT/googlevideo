// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.0
// source: video_streaming/reload_player_response.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "video_streaming";

export interface ReloadPlaybackParams {
  token?: string | undefined;
}

export interface ReloadPlaybackContext {
  reloadPlaybackParams?: ReloadPlaybackParams | undefined;
}

function createBaseReloadPlaybackParams(): ReloadPlaybackParams {
  return { token: "" };
}

export const ReloadPlaybackParams: MessageFns<ReloadPlaybackParams> = {
  encode(message: ReloadPlaybackParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== undefined && message.token !== "") {
      writer.uint32(10).string(message.token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReloadPlaybackParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReloadPlaybackParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseReloadPlaybackContext(): ReloadPlaybackContext {
  return { reloadPlaybackParams: undefined };
}

export const ReloadPlaybackContext: MessageFns<ReloadPlaybackContext> = {
  encode(message: ReloadPlaybackContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reloadPlaybackParams !== undefined) {
      ReloadPlaybackParams.encode(message.reloadPlaybackParams, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReloadPlaybackContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReloadPlaybackContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.reloadPlaybackParams = ReloadPlaybackParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
