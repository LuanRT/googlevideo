// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.0
// source: video_streaming/onesie_innertube_request.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { HttpHeader } from "../misc/common.js";

export const protobufPackage = "video_streaming";

export interface OnesieInnertubeRequest {
  url?: string | undefined;
  headers: HttpHeader[];
  body?: string | undefined;
  proxiedByTrustedBandaid?: boolean | undefined;
  skipResponseEncryption?: boolean | undefined;
}

function createBaseOnesieInnertubeRequest(): OnesieInnertubeRequest {
  return { url: "", headers: [], body: "", proxiedByTrustedBandaid: false, skipResponseEncryption: false };
}

export const OnesieInnertubeRequest: MessageFns<OnesieInnertubeRequest> = {
  encode(message: OnesieInnertubeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.url !== undefined && message.url !== "") {
      writer.uint32(10).string(message.url);
    }
    for (const v of message.headers) {
      HttpHeader.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.body !== undefined && message.body !== "") {
      writer.uint32(26).string(message.body);
    }
    if (message.proxiedByTrustedBandaid !== undefined && message.proxiedByTrustedBandaid !== false) {
      writer.uint32(32).bool(message.proxiedByTrustedBandaid);
    }
    if (message.skipResponseEncryption !== undefined && message.skipResponseEncryption !== false) {
      writer.uint32(48).bool(message.skipResponseEncryption);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnesieInnertubeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnesieInnertubeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.headers.push(HttpHeader.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.body = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.proxiedByTrustedBandaid = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.skipResponseEncryption = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
