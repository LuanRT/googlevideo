// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.0
// source: video_streaming/next_request_policy.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PlaybackCookie } from "./playback_cookie.js";

export const protobufPackage = "video_streaming";

export interface NextRequestPolicy {
  targetAudioReadaheadMs?: number | undefined;
  targetVideoReadaheadMs?: number | undefined;
  maxTimeSinceLastRequestMs?: number | undefined;
  backoffTimeMs?: number | undefined;
  minAudioReadaheadMs?: number | undefined;
  minVideoReadaheadMs?: number | undefined;
  playbackCookie?: PlaybackCookie | undefined;
  videoId?: string | undefined;
}

function createBaseNextRequestPolicy(): NextRequestPolicy {
  return {
    targetAudioReadaheadMs: 0,
    targetVideoReadaheadMs: 0,
    maxTimeSinceLastRequestMs: 0,
    backoffTimeMs: 0,
    minAudioReadaheadMs: 0,
    minVideoReadaheadMs: 0,
    playbackCookie: undefined,
    videoId: "",
  };
}

export const NextRequestPolicy: MessageFns<NextRequestPolicy> = {
  encode(message: NextRequestPolicy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.targetAudioReadaheadMs !== undefined && message.targetAudioReadaheadMs !== 0) {
      writer.uint32(8).int32(message.targetAudioReadaheadMs);
    }
    if (message.targetVideoReadaheadMs !== undefined && message.targetVideoReadaheadMs !== 0) {
      writer.uint32(16).int32(message.targetVideoReadaheadMs);
    }
    if (message.maxTimeSinceLastRequestMs !== undefined && message.maxTimeSinceLastRequestMs !== 0) {
      writer.uint32(24).int32(message.maxTimeSinceLastRequestMs);
    }
    if (message.backoffTimeMs !== undefined && message.backoffTimeMs !== 0) {
      writer.uint32(32).int32(message.backoffTimeMs);
    }
    if (message.minAudioReadaheadMs !== undefined && message.minAudioReadaheadMs !== 0) {
      writer.uint32(40).int32(message.minAudioReadaheadMs);
    }
    if (message.minVideoReadaheadMs !== undefined && message.minVideoReadaheadMs !== 0) {
      writer.uint32(48).int32(message.minVideoReadaheadMs);
    }
    if (message.playbackCookie !== undefined) {
      PlaybackCookie.encode(message.playbackCookie, writer.uint32(58).fork()).join();
    }
    if (message.videoId !== undefined && message.videoId !== "") {
      writer.uint32(66).string(message.videoId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NextRequestPolicy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNextRequestPolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.targetAudioReadaheadMs = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.targetVideoReadaheadMs = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.maxTimeSinceLastRequestMs = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.backoffTimeMs = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.minAudioReadaheadMs = reader.int32();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.minVideoReadaheadMs = reader.int32();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.playbackCookie = PlaybackCookie.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.videoId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
