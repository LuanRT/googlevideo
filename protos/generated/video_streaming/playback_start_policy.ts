// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.29.3
// source: video_streaming/playback_start_policy.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "video_streaming";

export interface PlaybackStartPolicy {
  startMinReadaheadPolicy?: PlaybackStartPolicy_ReadaheadPolicy | undefined;
  resumeMinReadaheadPolicy?: PlaybackStartPolicy_ReadaheadPolicy | undefined;
}

export interface PlaybackStartPolicy_ReadaheadPolicy {
  minReadaheadMs?: number | undefined;
  minBandwidthBytesPerSec?: number | undefined;
}

function createBasePlaybackStartPolicy(): PlaybackStartPolicy {
  return { startMinReadaheadPolicy: undefined, resumeMinReadaheadPolicy: undefined };
}

export const PlaybackStartPolicy: MessageFns<PlaybackStartPolicy> = {
  encode(message: PlaybackStartPolicy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.startMinReadaheadPolicy !== undefined) {
      PlaybackStartPolicy_ReadaheadPolicy.encode(message.startMinReadaheadPolicy, writer.uint32(10).fork()).join();
    }
    if (message.resumeMinReadaheadPolicy !== undefined) {
      PlaybackStartPolicy_ReadaheadPolicy.encode(message.resumeMinReadaheadPolicy, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlaybackStartPolicy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlaybackStartPolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.startMinReadaheadPolicy = PlaybackStartPolicy_ReadaheadPolicy.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.resumeMinReadaheadPolicy = PlaybackStartPolicy_ReadaheadPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBasePlaybackStartPolicy_ReadaheadPolicy(): PlaybackStartPolicy_ReadaheadPolicy {
  return { minReadaheadMs: 0, minBandwidthBytesPerSec: 0 };
}

export const PlaybackStartPolicy_ReadaheadPolicy: MessageFns<PlaybackStartPolicy_ReadaheadPolicy> = {
  encode(message: PlaybackStartPolicy_ReadaheadPolicy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.minReadaheadMs !== undefined && message.minReadaheadMs !== 0) {
      writer.uint32(16).int32(message.minReadaheadMs);
    }
    if (message.minBandwidthBytesPerSec !== undefined && message.minBandwidthBytesPerSec !== 0) {
      writer.uint32(8).int32(message.minBandwidthBytesPerSec);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlaybackStartPolicy_ReadaheadPolicy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlaybackStartPolicy_ReadaheadPolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 16) {
            break;
          }

          message.minReadaheadMs = reader.int32();
          continue;
        case 1:
          if (tag !== 8) {
            break;
          }

          message.minBandwidthBytesPerSec = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
