// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.28.0
// source: video_streaming/playback_cookie.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { FormatId } from "../misc/common.js";

export const protobufPackage = "video_streaming";

export interface PlaybackCookie {
  /** Always 999999 when resolution is set manually, or if the auto selected one is the max available resolution. */
  resolution?: number | undefined;
  field2?: number | undefined;
  videoFmt?: FormatId | undefined;
  audioFmt?: FormatId | undefined;
}

function createBasePlaybackCookie(): PlaybackCookie {
  return { resolution: 0, field2: 0, videoFmt: undefined, audioFmt: undefined };
}

export const PlaybackCookie: MessageFns<PlaybackCookie> = {
  encode(message: PlaybackCookie, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resolution !== undefined && message.resolution !== 0) {
      writer.uint32(8).int32(message.resolution);
    }
    if (message.field2 !== undefined && message.field2 !== 0) {
      writer.uint32(16).int32(message.field2);
    }
    if (message.videoFmt !== undefined) {
      FormatId.encode(message.videoFmt, writer.uint32(58).fork()).join();
    }
    if (message.audioFmt !== undefined) {
      FormatId.encode(message.audioFmt, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlaybackCookie {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlaybackCookie();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.resolution = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.field2 = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.videoFmt = FormatId.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.audioFmt = FormatId.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
